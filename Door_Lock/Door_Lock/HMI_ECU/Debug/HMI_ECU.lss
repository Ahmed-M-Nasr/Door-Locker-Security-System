
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b8  00800060  00002cb0  00002d44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800118  00800118  00002dfc  2**0
                  ALLOC
  3 .stab         00002820  00000000  00000000  00002dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001197  00000000  00000000  0000561c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000067b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000068f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000086ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009597  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a344  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a4a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a731  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aeff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 31       	cpi	r26, 0x18	; 24
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e1       	ldi	r26, 0x18	; 24
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 31       	cpi	r26, 0x1E	; 30
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 56 16 	jmp	0x2cac	; 0x2cac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ef       	ldi	r26, 0xF9	; 249
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 02 16 	jmp	0x2c04	; 0x2c04 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 02 16 	jmp	0x2c04	; 0x2c04 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	89 ef       	ldi	r24, 0xF9	; 249
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 02 16 	jmp	0x2c04	; 0x2c04 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 02 16 	jmp	0x2c04	; 0x2c04 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e6 15 	jmp	0x2bcc	; 0x2bcc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 02 16 	jmp	0x2c04	; 0x2c04 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void New_Pass(void);
void closing(void);
void delay(void);
uint8 flag=1;
int main(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	cf 56       	subi	r28, 0x6F	; 111
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	uint8 ack=0;
     b60:	fe 01       	movw	r30, r28
     b62:	e6 5b       	subi	r30, 0xB6	; 182
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	10 82       	st	Z, r1
	uint8 k;
	uint8 Check;
	uint8 Trials=0;
     b68:	fe 01       	movw	r30, r28
     b6a:	e9 5b       	subi	r30, 0xB9	; 185
     b6c:	ff 4f       	sbci	r31, 0xFF	; 255
     b6e:	10 82       	st	Z, r1
	Timer_ConfigType Timer_Config_Door = {F_CPU_1024,OVERFLOW,NORMAL,0,delay,50};
     b70:	ce 01       	movw	r24, r28
     b72:	85 5b       	subi	r24, 0xB5	; 181
     b74:	9f 4f       	sbci	r25, 0xFF	; 255
     b76:	a3 96       	adiw	r28, 0x23	; 35
     b78:	9f af       	std	Y+63, r25	; 0x3f
     b7a:	8e af       	std	Y+62, r24	; 0x3e
     b7c:	a3 97       	sbiw	r28, 0x23	; 35
     b7e:	81 e1       	ldi	r24, 0x11	; 17
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	a5 96       	adiw	r28, 0x25	; 37
     b84:	9f af       	std	Y+63, r25	; 0x3f
     b86:	8e af       	std	Y+62, r24	; 0x3e
     b88:	a5 97       	sbiw	r28, 0x25	; 37
     b8a:	97 e0       	ldi	r25, 0x07	; 7
     b8c:	a6 96       	adiw	r28, 0x26	; 38
     b8e:	9f af       	std	Y+63, r25	; 0x3f
     b90:	a6 97       	sbiw	r28, 0x26	; 38
     b92:	a5 96       	adiw	r28, 0x25	; 37
     b94:	ee ad       	ldd	r30, Y+62	; 0x3e
     b96:	ff ad       	ldd	r31, Y+63	; 0x3f
     b98:	a5 97       	sbiw	r28, 0x25	; 37
     b9a:	00 80       	ld	r0, Z
     b9c:	a5 96       	adiw	r28, 0x25	; 37
     b9e:	8e ad       	ldd	r24, Y+62	; 0x3e
     ba0:	9f ad       	ldd	r25, Y+63	; 0x3f
     ba2:	a5 97       	sbiw	r28, 0x25	; 37
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	a5 96       	adiw	r28, 0x25	; 37
     ba8:	9f af       	std	Y+63, r25	; 0x3f
     baa:	8e af       	std	Y+62, r24	; 0x3e
     bac:	a5 97       	sbiw	r28, 0x25	; 37
     bae:	a3 96       	adiw	r28, 0x23	; 35
     bb0:	ee ad       	ldd	r30, Y+62	; 0x3e
     bb2:	ff ad       	ldd	r31, Y+63	; 0x3f
     bb4:	a3 97       	sbiw	r28, 0x23	; 35
     bb6:	00 82       	st	Z, r0
     bb8:	a3 96       	adiw	r28, 0x23	; 35
     bba:	8e ad       	ldd	r24, Y+62	; 0x3e
     bbc:	9f ad       	ldd	r25, Y+63	; 0x3f
     bbe:	a3 97       	sbiw	r28, 0x23	; 35
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	a3 96       	adiw	r28, 0x23	; 35
     bc4:	9f af       	std	Y+63, r25	; 0x3f
     bc6:	8e af       	std	Y+62, r24	; 0x3e
     bc8:	a3 97       	sbiw	r28, 0x23	; 35
     bca:	a6 96       	adiw	r28, 0x26	; 38
     bcc:	9f ad       	ldd	r25, Y+63	; 0x3f
     bce:	a6 97       	sbiw	r28, 0x26	; 38
     bd0:	91 50       	subi	r25, 0x01	; 1
     bd2:	a6 96       	adiw	r28, 0x26	; 38
     bd4:	9f af       	std	Y+63, r25	; 0x3f
     bd6:	a6 97       	sbiw	r28, 0x26	; 38
     bd8:	a6 96       	adiw	r28, 0x26	; 38
     bda:	ef ad       	ldd	r30, Y+63	; 0x3f
     bdc:	a6 97       	sbiw	r28, 0x26	; 38
     bde:	ee 23       	and	r30, r30
     be0:	c1 f6       	brne	.-80     	; 0xb92 <main+0x4c>
	Timer_ConfigType Timer_Config_Alarm = {F_CPU_1024,OVERFLOW,NORMAL,0,delay,200};
     be2:	ce 01       	movw	r24, r28
     be4:	8e 5a       	subi	r24, 0xAE	; 174
     be6:	9f 4f       	sbci	r25, 0xFF	; 255
     be8:	a8 96       	adiw	r28, 0x28	; 40
     bea:	9f af       	std	Y+63, r25	; 0x3f
     bec:	8e af       	std	Y+62, r24	; 0x3e
     bee:	a8 97       	sbiw	r28, 0x28	; 40
     bf0:	8a e0       	ldi	r24, 0x0A	; 10
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	aa 96       	adiw	r28, 0x2a	; 42
     bf6:	9f af       	std	Y+63, r25	; 0x3f
     bf8:	8e af       	std	Y+62, r24	; 0x3e
     bfa:	aa 97       	sbiw	r28, 0x2a	; 42
     bfc:	97 e0       	ldi	r25, 0x07	; 7
     bfe:	ab 96       	adiw	r28, 0x2b	; 43
     c00:	9f af       	std	Y+63, r25	; 0x3f
     c02:	ab 97       	sbiw	r28, 0x2b	; 43
     c04:	aa 96       	adiw	r28, 0x2a	; 42
     c06:	ee ad       	ldd	r30, Y+62	; 0x3e
     c08:	ff ad       	ldd	r31, Y+63	; 0x3f
     c0a:	aa 97       	sbiw	r28, 0x2a	; 42
     c0c:	00 80       	ld	r0, Z
     c0e:	aa 96       	adiw	r28, 0x2a	; 42
     c10:	8e ad       	ldd	r24, Y+62	; 0x3e
     c12:	9f ad       	ldd	r25, Y+63	; 0x3f
     c14:	aa 97       	sbiw	r28, 0x2a	; 42
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	aa 96       	adiw	r28, 0x2a	; 42
     c1a:	9f af       	std	Y+63, r25	; 0x3f
     c1c:	8e af       	std	Y+62, r24	; 0x3e
     c1e:	aa 97       	sbiw	r28, 0x2a	; 42
     c20:	a8 96       	adiw	r28, 0x28	; 40
     c22:	ee ad       	ldd	r30, Y+62	; 0x3e
     c24:	ff ad       	ldd	r31, Y+63	; 0x3f
     c26:	a8 97       	sbiw	r28, 0x28	; 40
     c28:	00 82       	st	Z, r0
     c2a:	a8 96       	adiw	r28, 0x28	; 40
     c2c:	8e ad       	ldd	r24, Y+62	; 0x3e
     c2e:	9f ad       	ldd	r25, Y+63	; 0x3f
     c30:	a8 97       	sbiw	r28, 0x28	; 40
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	a8 96       	adiw	r28, 0x28	; 40
     c36:	9f af       	std	Y+63, r25	; 0x3f
     c38:	8e af       	std	Y+62, r24	; 0x3e
     c3a:	a8 97       	sbiw	r28, 0x28	; 40
     c3c:	ab 96       	adiw	r28, 0x2b	; 43
     c3e:	9f ad       	ldd	r25, Y+63	; 0x3f
     c40:	ab 97       	sbiw	r28, 0x2b	; 43
     c42:	91 50       	subi	r25, 0x01	; 1
     c44:	ab 96       	adiw	r28, 0x2b	; 43
     c46:	9f af       	std	Y+63, r25	; 0x3f
     c48:	ab 97       	sbiw	r28, 0x2b	; 43
     c4a:	ab 96       	adiw	r28, 0x2b	; 43
     c4c:	ef ad       	ldd	r30, Y+63	; 0x3f
     c4e:	ab 97       	sbiw	r28, 0x2b	; 43
     c50:	ee 23       	and	r30, r30
     c52:	c1 f6       	brne	.-80     	; 0xc04 <main+0xbe>
	Uart_ConfigType Uart_Config = {Double_speed,Asynch,Disabled,bit,9600};
     c54:	ce 01       	movw	r24, r28
     c56:	87 5a       	subi	r24, 0xA7	; 167
     c58:	9f 4f       	sbci	r25, 0xFF	; 255
     c5a:	ad 96       	adiw	r28, 0x2d	; 45
     c5c:	9f af       	std	Y+63, r25	; 0x3f
     c5e:	8e af       	std	Y+62, r24	; 0x3e
     c60:	ad 97       	sbiw	r28, 0x2d	; 45
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	91 e0       	ldi	r25, 0x01	; 1
     c66:	af 96       	adiw	r28, 0x2f	; 47
     c68:	9f af       	std	Y+63, r25	; 0x3f
     c6a:	8e af       	std	Y+62, r24	; 0x3e
     c6c:	af 97       	sbiw	r28, 0x2f	; 47
     c6e:	98 e0       	ldi	r25, 0x08	; 8
     c70:	e0 96       	adiw	r28, 0x30	; 48
     c72:	9f af       	std	Y+63, r25	; 0x3f
     c74:	e0 97       	sbiw	r28, 0x30	; 48
     c76:	af 96       	adiw	r28, 0x2f	; 47
     c78:	ee ad       	ldd	r30, Y+62	; 0x3e
     c7a:	ff ad       	ldd	r31, Y+63	; 0x3f
     c7c:	af 97       	sbiw	r28, 0x2f	; 47
     c7e:	00 80       	ld	r0, Z
     c80:	af 96       	adiw	r28, 0x2f	; 47
     c82:	8e ad       	ldd	r24, Y+62	; 0x3e
     c84:	9f ad       	ldd	r25, Y+63	; 0x3f
     c86:	af 97       	sbiw	r28, 0x2f	; 47
     c88:	01 96       	adiw	r24, 0x01	; 1
     c8a:	af 96       	adiw	r28, 0x2f	; 47
     c8c:	9f af       	std	Y+63, r25	; 0x3f
     c8e:	8e af       	std	Y+62, r24	; 0x3e
     c90:	af 97       	sbiw	r28, 0x2f	; 47
     c92:	ad 96       	adiw	r28, 0x2d	; 45
     c94:	ee ad       	ldd	r30, Y+62	; 0x3e
     c96:	ff ad       	ldd	r31, Y+63	; 0x3f
     c98:	ad 97       	sbiw	r28, 0x2d	; 45
     c9a:	00 82       	st	Z, r0
     c9c:	ad 96       	adiw	r28, 0x2d	; 45
     c9e:	8e ad       	ldd	r24, Y+62	; 0x3e
     ca0:	9f ad       	ldd	r25, Y+63	; 0x3f
     ca2:	ad 97       	sbiw	r28, 0x2d	; 45
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	ad 96       	adiw	r28, 0x2d	; 45
     ca8:	9f af       	std	Y+63, r25	; 0x3f
     caa:	8e af       	std	Y+62, r24	; 0x3e
     cac:	ad 97       	sbiw	r28, 0x2d	; 45
     cae:	e0 96       	adiw	r28, 0x30	; 48
     cb0:	9f ad       	ldd	r25, Y+63	; 0x3f
     cb2:	e0 97       	sbiw	r28, 0x30	; 48
     cb4:	91 50       	subi	r25, 0x01	; 1
     cb6:	e0 96       	adiw	r28, 0x30	; 48
     cb8:	9f af       	std	Y+63, r25	; 0x3f
     cba:	e0 97       	sbiw	r28, 0x30	; 48
     cbc:	e0 96       	adiw	r28, 0x30	; 48
     cbe:	ef ad       	ldd	r30, Y+63	; 0x3f
     cc0:	e0 97       	sbiw	r28, 0x30	; 48
     cc2:	ee 23       	and	r30, r30
     cc4:	c1 f6       	brne	.-80     	; 0xc76 <main+0x130>
	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_init(&Uart_Config);
     cc6:	ce 01       	movw	r24, r28
     cc8:	87 5a       	subi	r24, 0xA7	; 167
     cca:	9f 4f       	sbci	r25, 0xFF	; 255
     ccc:	0e 94 b1 14 	call	0x2962	; 0x2962 <UART_init>
	LCD_init();
     cd0:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <LCD_init>
	while(1){
	while(1){
	LCD_clearScreen();
     cd4:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_clearScreen>
	New_Pass();
     cd8:	0e 94 3c 0a 	call	0x1478	; 0x1478 <New_Pass>
	Check=UART_recieveByte();
     cdc:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <UART_recieveByte>
     ce0:	fe 01       	movw	r30, r28
     ce2:	e8 5b       	subi	r30, 0xB8	; 184
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	80 83       	st	Z, r24
	if(Check=='F'){
     ce8:	fe 01       	movw	r30, r28
     cea:	e8 5b       	subi	r30, 0xB8	; 184
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	80 81       	ld	r24, Z
     cf0:	86 34       	cpi	r24, 0x46	; 70
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <main+0x1b0>
     cf4:	91 c0       	rjmp	.+290    	; 0xe18 <main+0x2d2>
	LCD_clearScreen();
     cf6:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Does Not Match");
     cfa:	20 e6       	ldi	r18, 0x60	; 96
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	a9 01       	movw	r20, r18
     d04:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayStringRowColumn>
     d08:	fe 01       	movw	r30, r28
     d0a:	ed 5b       	subi	r30, 0xBD	; 189
     d0c:	ff 4f       	sbci	r31, 0xFF	; 255
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	aa ef       	ldi	r26, 0xFA	; 250
     d14:	b4 e4       	ldi	r27, 0x44	; 68
     d16:	80 83       	st	Z, r24
     d18:	91 83       	std	Z+1, r25	; 0x01
     d1a:	a2 83       	std	Z+2, r26	; 0x02
     d1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d1e:	8e 01       	movw	r16, r28
     d20:	01 5c       	subi	r16, 0xC1	; 193
     d22:	1f 4f       	sbci	r17, 0xFF	; 255
     d24:	fe 01       	movw	r30, r28
     d26:	ed 5b       	subi	r30, 0xBD	; 189
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	60 81       	ld	r22, Z
     d2c:	71 81       	ldd	r23, Z+1	; 0x01
     d2e:	82 81       	ldd	r24, Z+2	; 0x02
     d30:	93 81       	ldd	r25, Z+3	; 0x03
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	4a e7       	ldi	r20, 0x7A	; 122
     d38:	53 e4       	ldi	r21, 0x43	; 67
     d3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	f8 01       	movw	r30, r16
     d44:	80 83       	st	Z, r24
     d46:	91 83       	std	Z+1, r25	; 0x01
     d48:	a2 83       	std	Z+2, r26	; 0x02
     d4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d4c:	fe 01       	movw	r30, r28
     d4e:	ff 96       	adiw	r30, 0x3f	; 63
     d50:	60 81       	ld	r22, Z
     d52:	71 81       	ldd	r23, Z+1	; 0x01
     d54:	82 81       	ldd	r24, Z+2	; 0x02
     d56:	93 81       	ldd	r25, Z+3	; 0x03
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	40 e8       	ldi	r20, 0x80	; 128
     d5e:	5f e3       	ldi	r21, 0x3F	; 63
     d60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d64:	88 23       	and	r24, r24
     d66:	2c f4       	brge	.+10     	; 0xd72 <main+0x22c>
		__ticks = 1;
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	9e af       	std	Y+62, r25	; 0x3e
     d6e:	8d af       	std	Y+61, r24	; 0x3d
     d70:	46 c0       	rjmp	.+140    	; 0xdfe <main+0x2b8>
	else if (__tmp > 65535)
     d72:	fe 01       	movw	r30, r28
     d74:	ff 96       	adiw	r30, 0x3f	; 63
     d76:	60 81       	ld	r22, Z
     d78:	71 81       	ldd	r23, Z+1	; 0x01
     d7a:	82 81       	ldd	r24, Z+2	; 0x02
     d7c:	93 81       	ldd	r25, Z+3	; 0x03
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	3f ef       	ldi	r19, 0xFF	; 255
     d82:	4f e7       	ldi	r20, 0x7F	; 127
     d84:	57 e4       	ldi	r21, 0x47	; 71
     d86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d8a:	18 16       	cp	r1, r24
     d8c:	64 f5       	brge	.+88     	; 0xde6 <main+0x2a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d8e:	fe 01       	movw	r30, r28
     d90:	ed 5b       	subi	r30, 0xBD	; 189
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	60 81       	ld	r22, Z
     d96:	71 81       	ldd	r23, Z+1	; 0x01
     d98:	82 81       	ldd	r24, Z+2	; 0x02
     d9a:	93 81       	ldd	r25, Z+3	; 0x03
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	40 e2       	ldi	r20, 0x20	; 32
     da2:	51 e4       	ldi	r21, 0x41	; 65
     da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da8:	dc 01       	movw	r26, r24
     daa:	cb 01       	movw	r24, r22
     dac:	bc 01       	movw	r22, r24
     dae:	cd 01       	movw	r24, r26
     db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db4:	dc 01       	movw	r26, r24
     db6:	cb 01       	movw	r24, r22
     db8:	9e af       	std	Y+62, r25	; 0x3e
     dba:	8d af       	std	Y+61, r24	; 0x3d
     dbc:	0f c0       	rjmp	.+30     	; 0xddc <main+0x296>
     dbe:	89 e1       	ldi	r24, 0x19	; 25
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	9c af       	std	Y+60, r25	; 0x3c
     dc4:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dc6:	8b ad       	ldd	r24, Y+59	; 0x3b
     dc8:	9c ad       	ldd	r25, Y+60	; 0x3c
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	f1 f7       	brne	.-4      	; 0xdca <main+0x284>
     dce:	9c af       	std	Y+60, r25	; 0x3c
     dd0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd2:	8d ad       	ldd	r24, Y+61	; 0x3d
     dd4:	9e ad       	ldd	r25, Y+62	; 0x3e
     dd6:	01 97       	sbiw	r24, 0x01	; 1
     dd8:	9e af       	std	Y+62, r25	; 0x3e
     dda:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ddc:	8d ad       	ldd	r24, Y+61	; 0x3d
     dde:	9e ad       	ldd	r25, Y+62	; 0x3e
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	69 f7       	brne	.-38     	; 0xdbe <main+0x278>
     de4:	16 c0       	rjmp	.+44     	; 0xe12 <main+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de6:	fe 01       	movw	r30, r28
     de8:	ff 96       	adiw	r30, 0x3f	; 63
     dea:	60 81       	ld	r22, Z
     dec:	71 81       	ldd	r23, Z+1	; 0x01
     dee:	82 81       	ldd	r24, Z+2	; 0x02
     df0:	93 81       	ldd	r25, Z+3	; 0x03
     df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	9e af       	std	Y+62, r25	; 0x3e
     dfc:	8d af       	std	Y+61, r24	; 0x3d
     dfe:	8d ad       	ldd	r24, Y+61	; 0x3d
     e00:	9e ad       	ldd	r25, Y+62	; 0x3e
     e02:	9a af       	std	Y+58, r25	; 0x3a
     e04:	89 af       	std	Y+57, r24	; 0x39
     e06:	89 ad       	ldd	r24, Y+57	; 0x39
     e08:	9a ad       	ldd	r25, Y+58	; 0x3a
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	f1 f7       	brne	.-4      	; 0xe0a <main+0x2c4>
     e0e:	9a af       	std	Y+58, r25	; 0x3a
     e10:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2000);
	LCD_clearScreen();
     e12:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_clearScreen>
     e16:	5e cf       	rjmp	.-324    	; 0xcd4 <main+0x18e>
	break;}
	while(1){
	LCD_clearScreen();
     e18:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+:open door");
     e1c:	2f e6       	ldi	r18, 0x6F	; 111
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	a9 01       	movw	r20, r18
     e26:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"-:change password");
     e2a:	2b e7       	ldi	r18, 0x7B	; 123
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	a9 01       	movw	r20, r18
     e34:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayStringRowColumn>
	k = KEYPAD_getPressedKey();
     e38:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <KEYPAD_getPressedKey>
     e3c:	fe 01       	movw	r30, r28
     e3e:	e7 5b       	subi	r30, 0xB7	; 183
     e40:	ff 4f       	sbci	r31, 0xFF	; 255
     e42:	80 83       	st	Z, r24
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	aa e7       	ldi	r26, 0x7A	; 122
     e4a:	b4 e4       	ldi	r27, 0x44	; 68
     e4c:	8d ab       	std	Y+53, r24	; 0x35
     e4e:	9e ab       	std	Y+54, r25	; 0x36
     e50:	af ab       	std	Y+55, r26	; 0x37
     e52:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e54:	6d a9       	ldd	r22, Y+53	; 0x35
     e56:	7e a9       	ldd	r23, Y+54	; 0x36
     e58:	8f a9       	ldd	r24, Y+55	; 0x37
     e5a:	98 ad       	ldd	r25, Y+56	; 0x38
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	4a e7       	ldi	r20, 0x7A	; 122
     e62:	53 e4       	ldi	r21, 0x43	; 67
     e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	89 ab       	std	Y+49, r24	; 0x31
     e6e:	9a ab       	std	Y+50, r25	; 0x32
     e70:	ab ab       	std	Y+51, r26	; 0x33
     e72:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e74:	69 a9       	ldd	r22, Y+49	; 0x31
     e76:	7a a9       	ldd	r23, Y+50	; 0x32
     e78:	8b a9       	ldd	r24, Y+51	; 0x33
     e7a:	9c a9       	ldd	r25, Y+52	; 0x34
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e8       	ldi	r20, 0x80	; 128
     e82:	5f e3       	ldi	r21, 0x3F	; 63
     e84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e88:	88 23       	and	r24, r24
     e8a:	2c f4       	brge	.+10     	; 0xe96 <main+0x350>
		__ticks = 1;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	98 ab       	std	Y+48, r25	; 0x30
     e92:	8f a7       	std	Y+47, r24	; 0x2f
     e94:	3f c0       	rjmp	.+126    	; 0xf14 <main+0x3ce>
	else if (__tmp > 65535)
     e96:	69 a9       	ldd	r22, Y+49	; 0x31
     e98:	7a a9       	ldd	r23, Y+50	; 0x32
     e9a:	8b a9       	ldd	r24, Y+51	; 0x33
     e9c:	9c a9       	ldd	r25, Y+52	; 0x34
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	3f ef       	ldi	r19, 0xFF	; 255
     ea2:	4f e7       	ldi	r20, 0x7F	; 127
     ea4:	57 e4       	ldi	r21, 0x47	; 71
     ea6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eaa:	18 16       	cp	r1, r24
     eac:	4c f5       	brge	.+82     	; 0xf00 <main+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eae:	6d a9       	ldd	r22, Y+53	; 0x35
     eb0:	7e a9       	ldd	r23, Y+54	; 0x36
     eb2:	8f a9       	ldd	r24, Y+55	; 0x37
     eb4:	98 ad       	ldd	r25, Y+56	; 0x38
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e2       	ldi	r20, 0x20	; 32
     ebc:	51 e4       	ldi	r21, 0x41	; 65
     ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	bc 01       	movw	r22, r24
     ec8:	cd 01       	movw	r24, r26
     eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	98 ab       	std	Y+48, r25	; 0x30
     ed4:	8f a7       	std	Y+47, r24	; 0x2f
     ed6:	0f c0       	rjmp	.+30     	; 0xef6 <main+0x3b0>
     ed8:	89 e1       	ldi	r24, 0x19	; 25
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	9e a7       	std	Y+46, r25	; 0x2e
     ede:	8d a7       	std	Y+45, r24	; 0x2d
     ee0:	8d a5       	ldd	r24, Y+45	; 0x2d
     ee2:	9e a5       	ldd	r25, Y+46	; 0x2e
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	f1 f7       	brne	.-4      	; 0xee4 <main+0x39e>
     ee8:	9e a7       	std	Y+46, r25	; 0x2e
     eea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eec:	8f a5       	ldd	r24, Y+47	; 0x2f
     eee:	98 a9       	ldd	r25, Y+48	; 0x30
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	98 ab       	std	Y+48, r25	; 0x30
     ef4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef6:	8f a5       	ldd	r24, Y+47	; 0x2f
     ef8:	98 a9       	ldd	r25, Y+48	; 0x30
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	69 f7       	brne	.-38     	; 0xed8 <main+0x392>
     efe:	14 c0       	rjmp	.+40     	; 0xf28 <main+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f00:	69 a9       	ldd	r22, Y+49	; 0x31
     f02:	7a a9       	ldd	r23, Y+50	; 0x32
     f04:	8b a9       	ldd	r24, Y+51	; 0x33
     f06:	9c a9       	ldd	r25, Y+52	; 0x34
     f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	98 ab       	std	Y+48, r25	; 0x30
     f12:	8f a7       	std	Y+47, r24	; 0x2f
     f14:	8f a5       	ldd	r24, Y+47	; 0x2f
     f16:	98 a9       	ldd	r25, Y+48	; 0x30
     f18:	9c a7       	std	Y+44, r25	; 0x2c
     f1a:	8b a7       	std	Y+43, r24	; 0x2b
     f1c:	8b a5       	ldd	r24, Y+43	; 0x2b
     f1e:	9c a5       	ldd	r25, Y+44	; 0x2c
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <main+0x3da>
     f24:	9c a7       	std	Y+44, r25	; 0x2c
     f26:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	LCD_clearScreen();
     f28:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_clearScreen>
	LCD_moveCursor(1,0);
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_moveCursor>
	if(k=='+'){
     f34:	fe 01       	movw	r30, r28
     f36:	e7 5b       	subi	r30, 0xB7	; 183
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	80 81       	ld	r24, Z
     f3c:	8b 32       	cpi	r24, 0x2B	; 43
     f3e:	09 f0       	breq	.+2      	; 0xf42 <main+0x3fc>
     f40:	5f c1       	rjmp	.+702    	; 0x1200 <main+0x6ba>
	LCD_clearScreen();
     f42:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter password");
     f46:	2d e8       	ldi	r18, 0x8D	; 141
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	a9 01       	movw	r20, r18
     f50:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayStringRowColumn>
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	aa e7       	ldi	r26, 0x7A	; 122
     f5a:	b4 e4       	ldi	r27, 0x44	; 68
     f5c:	8f a3       	std	Y+39, r24	; 0x27
     f5e:	98 a7       	std	Y+40, r25	; 0x28
     f60:	a9 a7       	std	Y+41, r26	; 0x29
     f62:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f64:	6f a1       	ldd	r22, Y+39	; 0x27
     f66:	78 a5       	ldd	r23, Y+40	; 0x28
     f68:	89 a5       	ldd	r24, Y+41	; 0x29
     f6a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	4a e7       	ldi	r20, 0x7A	; 122
     f72:	53 e4       	ldi	r21, 0x43	; 67
     f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	8b a3       	std	Y+35, r24	; 0x23
     f7e:	9c a3       	std	Y+36, r25	; 0x24
     f80:	ad a3       	std	Y+37, r26	; 0x25
     f82:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f84:	6b a1       	ldd	r22, Y+35	; 0x23
     f86:	7c a1       	ldd	r23, Y+36	; 0x24
     f88:	8d a1       	ldd	r24, Y+37	; 0x25
     f8a:	9e a1       	ldd	r25, Y+38	; 0x26
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e8       	ldi	r20, 0x80	; 128
     f92:	5f e3       	ldi	r21, 0x3F	; 63
     f94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f98:	88 23       	and	r24, r24
     f9a:	2c f4       	brge	.+10     	; 0xfa6 <main+0x460>
		__ticks = 1;
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	9a a3       	std	Y+34, r25	; 0x22
     fa2:	89 a3       	std	Y+33, r24	; 0x21
     fa4:	3f c0       	rjmp	.+126    	; 0x1024 <main+0x4de>
	else if (__tmp > 65535)
     fa6:	6b a1       	ldd	r22, Y+35	; 0x23
     fa8:	7c a1       	ldd	r23, Y+36	; 0x24
     faa:	8d a1       	ldd	r24, Y+37	; 0x25
     fac:	9e a1       	ldd	r25, Y+38	; 0x26
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	3f ef       	ldi	r19, 0xFF	; 255
     fb2:	4f e7       	ldi	r20, 0x7F	; 127
     fb4:	57 e4       	ldi	r21, 0x47	; 71
     fb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fba:	18 16       	cp	r1, r24
     fbc:	4c f5       	brge	.+82     	; 0x1010 <main+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fbe:	6f a1       	ldd	r22, Y+39	; 0x27
     fc0:	78 a5       	ldd	r23, Y+40	; 0x28
     fc2:	89 a5       	ldd	r24, Y+41	; 0x29
     fc4:	9a a5       	ldd	r25, Y+42	; 0x2a
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e2       	ldi	r20, 0x20	; 32
     fcc:	51 e4       	ldi	r21, 0x41	; 65
     fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	bc 01       	movw	r22, r24
     fd8:	cd 01       	movw	r24, r26
     fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	9a a3       	std	Y+34, r25	; 0x22
     fe4:	89 a3       	std	Y+33, r24	; 0x21
     fe6:	0f c0       	rjmp	.+30     	; 0x1006 <main+0x4c0>
     fe8:	89 e1       	ldi	r24, 0x19	; 25
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	98 a3       	std	Y+32, r25	; 0x20
     fee:	8f 8f       	std	Y+31, r24	; 0x1f
     ff0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ff2:	98 a1       	ldd	r25, Y+32	; 0x20
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <main+0x4ae>
     ff8:	98 a3       	std	Y+32, r25	; 0x20
     ffa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffc:	89 a1       	ldd	r24, Y+33	; 0x21
     ffe:	9a a1       	ldd	r25, Y+34	; 0x22
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	9a a3       	std	Y+34, r25	; 0x22
    1004:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1006:	89 a1       	ldd	r24, Y+33	; 0x21
    1008:	9a a1       	ldd	r25, Y+34	; 0x22
    100a:	00 97       	sbiw	r24, 0x00	; 0
    100c:	69 f7       	brne	.-38     	; 0xfe8 <main+0x4a2>
    100e:	14 c0       	rjmp	.+40     	; 0x1038 <main+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1010:	6b a1       	ldd	r22, Y+35	; 0x23
    1012:	7c a1       	ldd	r23, Y+36	; 0x24
    1014:	8d a1       	ldd	r24, Y+37	; 0x25
    1016:	9e a1       	ldd	r25, Y+38	; 0x26
    1018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	9a a3       	std	Y+34, r25	; 0x22
    1022:	89 a3       	std	Y+33, r24	; 0x21
    1024:	89 a1       	ldd	r24, Y+33	; 0x21
    1026:	9a a1       	ldd	r25, Y+34	; 0x22
    1028:	9e 8f       	std	Y+30, r25	; 0x1e
    102a:	8d 8f       	std	Y+29, r24	; 0x1d
    102c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    102e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <main+0x4ea>
    1034:	9e 8f       	std	Y+30, r25	; 0x1e
    1036:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	Get_Pass();
    1038:	0e 94 9e 09 	call	0x133c	; 0x133c <Get_Pass>
	LCD_clearScreen();
    103c:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_clearScreen>
	ack = UART_recieveByte();
    1040:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <UART_recieveByte>
    1044:	fe 01       	movw	r30, r28
    1046:	e6 5b       	subi	r30, 0xB6	; 182
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	80 83       	st	Z, r24
	if(ack==1){
    104c:	fe 01       	movw	r30, r28
    104e:	e6 5b       	subi	r30, 0xB6	; 182
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	80 81       	ld	r24, Z
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	59 f5       	brne	.+86     	; 0x10ae <main+0x568>
	LCD_displayStringRowColumn(0,0,"Door opening");
    1058:	2c e9       	ldi	r18, 0x9C	; 156
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	a9 01       	movw	r20, r18
    1062:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayStringRowColumn>
	Timer_init(&Timer_Config_Door);
    1066:	ce 01       	movw	r24, r28
    1068:	85 5b       	subi	r24, 0xB5	; 181
    106a:	9f 4f       	sbci	r25, 0xFF	; 255
    106c:	0e 94 11 14 	call	0x2822	; 0x2822 <Timer_init>
	while(flag==1){}
    1070:	80 91 01 01 	lds	r24, 0x0101
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	e1 f3       	breq	.-8      	; 0x1070 <main+0x52a>
	flag=1;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	80 93 01 01 	sts	0x0101, r24
	Trials=0;
    107e:	fe 01       	movw	r30, r28
    1080:	e9 5b       	subi	r30, 0xB9	; 185
    1082:	ff 4f       	sbci	r31, 0xFF	; 255
    1084:	10 82       	st	Z, r1
	LCD_displayStringRowColumn(0,0,"Door closing");
    1086:	29 ea       	ldi	r18, 0xA9	; 169
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	a9 01       	movw	r20, r18
    1090:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayStringRowColumn>
	Timer_init(&Timer_Config_Door);
    1094:	ce 01       	movw	r24, r28
    1096:	85 5b       	subi	r24, 0xB5	; 181
    1098:	9f 4f       	sbci	r25, 0xFF	; 255
    109a:	0e 94 11 14 	call	0x2822	; 0x2822 <Timer_init>
	while(flag==1){}
    109e:	80 91 01 01 	lds	r24, 0x0101
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	e1 f3       	breq	.-8      	; 0x109e <main+0x558>
	flag=1;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	80 93 01 01 	sts	0x0101, r24
    10ac:	36 c0       	rjmp	.+108    	; 0x111a <main+0x5d4>
	}
	else {
		LCD_displayStringRowColumn(0,0,"Incorrect");
    10ae:	26 eb       	ldi	r18, 0xB6	; 182
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	60 e0       	ldi	r22, 0x00	; 0
    10b6:	a9 01       	movw	r20, r18
    10b8:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayStringRowColumn>
		Trials++;
    10bc:	de 01       	movw	r26, r28
    10be:	a9 5b       	subi	r26, 0xB9	; 185
    10c0:	bf 4f       	sbci	r27, 0xFF	; 255
    10c2:	fe 01       	movw	r30, r28
    10c4:	e9 5b       	subi	r30, 0xB9	; 185
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	80 81       	ld	r24, Z
    10ca:	8f 5f       	subi	r24, 0xFF	; 255
    10cc:	8c 93       	st	X, r24
		if(Trials==3){
    10ce:	fe 01       	movw	r30, r28
    10d0:	e9 5b       	subi	r30, 0xB9	; 185
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	80 81       	ld	r24, Z
    10d6:	83 30       	cpi	r24, 0x03	; 3
    10d8:	e9 f4       	brne	.+58     	; 0x1114 <main+0x5ce>
			UART_sendByte('x');
    10da:	88 e7       	ldi	r24, 0x78	; 120
    10dc:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <UART_sendByte>
			LCD_clearScreen();
    10e0:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,6,"Alarm");
    10e4:	20 ec       	ldi	r18, 0xC0	; 192
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	66 e0       	ldi	r22, 0x06	; 6
    10ec:	a9 01       	movw	r20, r18
    10ee:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayStringRowColumn>
			Timer_init(&Timer_Config_Alarm);
    10f2:	ce 01       	movw	r24, r28
    10f4:	8e 5a       	subi	r24, 0xAE	; 174
    10f6:	9f 4f       	sbci	r25, 0xFF	; 255
    10f8:	0e 94 11 14 	call	0x2822	; 0x2822 <Timer_init>
			while(flag==1){}
    10fc:	80 91 01 01 	lds	r24, 0x0101
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	e1 f3       	breq	.-8      	; 0x10fc <main+0x5b6>
			flag=1;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	80 93 01 01 	sts	0x0101, r24
			Trials=0;
    110a:	fe 01       	movw	r30, r28
    110c:	e9 5b       	subi	r30, 0xB9	; 185
    110e:	ff 4f       	sbci	r31, 0xFF	; 255
    1110:	10 82       	st	Z, r1
    1112:	03 c0       	rjmp	.+6      	; 0x111a <main+0x5d4>
		}else { UART_sendByte(0);}
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <UART_sendByte>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	aa e7       	ldi	r26, 0x7A	; 122
    1120:	b4 e4       	ldi	r27, 0x44	; 68
    1122:	89 8f       	std	Y+25, r24	; 0x19
    1124:	9a 8f       	std	Y+26, r25	; 0x1a
    1126:	ab 8f       	std	Y+27, r26	; 0x1b
    1128:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112a:	69 8d       	ldd	r22, Y+25	; 0x19
    112c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    112e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1130:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	4a e7       	ldi	r20, 0x7A	; 122
    1138:	53 e4       	ldi	r21, 0x43	; 67
    113a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	8d 8b       	std	Y+21, r24	; 0x15
    1144:	9e 8b       	std	Y+22, r25	; 0x16
    1146:	af 8b       	std	Y+23, r26	; 0x17
    1148:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    114a:	6d 89       	ldd	r22, Y+21	; 0x15
    114c:	7e 89       	ldd	r23, Y+22	; 0x16
    114e:	8f 89       	ldd	r24, Y+23	; 0x17
    1150:	98 8d       	ldd	r25, Y+24	; 0x18
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e8       	ldi	r20, 0x80	; 128
    1158:	5f e3       	ldi	r21, 0x3F	; 63
    115a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    115e:	88 23       	and	r24, r24
    1160:	2c f4       	brge	.+10     	; 0x116c <main+0x626>
		__ticks = 1;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	9c 8b       	std	Y+20, r25	; 0x14
    1168:	8b 8b       	std	Y+19, r24	; 0x13
    116a:	3f c0       	rjmp	.+126    	; 0x11ea <main+0x6a4>
	else if (__tmp > 65535)
    116c:	6d 89       	ldd	r22, Y+21	; 0x15
    116e:	7e 89       	ldd	r23, Y+22	; 0x16
    1170:	8f 89       	ldd	r24, Y+23	; 0x17
    1172:	98 8d       	ldd	r25, Y+24	; 0x18
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	3f ef       	ldi	r19, 0xFF	; 255
    1178:	4f e7       	ldi	r20, 0x7F	; 127
    117a:	57 e4       	ldi	r21, 0x47	; 71
    117c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1180:	18 16       	cp	r1, r24
    1182:	4c f5       	brge	.+82     	; 0x11d6 <main+0x690>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1184:	69 8d       	ldd	r22, Y+25	; 0x19
    1186:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1188:	8b 8d       	ldd	r24, Y+27	; 0x1b
    118a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 e2       	ldi	r20, 0x20	; 32
    1192:	51 e4       	ldi	r21, 0x41	; 65
    1194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	bc 01       	movw	r22, r24
    119e:	cd 01       	movw	r24, r26
    11a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	9c 8b       	std	Y+20, r25	; 0x14
    11aa:	8b 8b       	std	Y+19, r24	; 0x13
    11ac:	0f c0       	rjmp	.+30     	; 0x11cc <main+0x686>
    11ae:	89 e1       	ldi	r24, 0x19	; 25
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	9a 8b       	std	Y+18, r25	; 0x12
    11b4:	89 8b       	std	Y+17, r24	; 0x11
    11b6:	89 89       	ldd	r24, Y+17	; 0x11
    11b8:	9a 89       	ldd	r25, Y+18	; 0x12
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <main+0x674>
    11be:	9a 8b       	std	Y+18, r25	; 0x12
    11c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c2:	8b 89       	ldd	r24, Y+19	; 0x13
    11c4:	9c 89       	ldd	r25, Y+20	; 0x14
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	9c 8b       	std	Y+20, r25	; 0x14
    11ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11cc:	8b 89       	ldd	r24, Y+19	; 0x13
    11ce:	9c 89       	ldd	r25, Y+20	; 0x14
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	69 f7       	brne	.-38     	; 0x11ae <main+0x668>
    11d4:	21 ce       	rjmp	.-958    	; 0xe18 <main+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d6:	6d 89       	ldd	r22, Y+21	; 0x15
    11d8:	7e 89       	ldd	r23, Y+22	; 0x16
    11da:	8f 89       	ldd	r24, Y+23	; 0x17
    11dc:	98 8d       	ldd	r25, Y+24	; 0x18
    11de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	9c 8b       	std	Y+20, r25	; 0x14
    11e8:	8b 8b       	std	Y+19, r24	; 0x13
    11ea:	8b 89       	ldd	r24, Y+19	; 0x13
    11ec:	9c 89       	ldd	r25, Y+20	; 0x14
    11ee:	98 8b       	std	Y+16, r25	; 0x10
    11f0:	8f 87       	std	Y+15, r24	; 0x0f
    11f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f4:	98 89       	ldd	r25, Y+16	; 0x10
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <main+0x6b0>
    11fa:	98 8b       	std	Y+16, r25	; 0x10
    11fc:	8f 87       	std	Y+15, r24	; 0x0f
    11fe:	0c ce       	rjmp	.-1000   	; 0xe18 <main+0x2d2>
	}
	_delay_ms(1000);
	}
	else if(k=='-'){
    1200:	fe 01       	movw	r30, r28
    1202:	e7 5b       	subi	r30, 0xB7	; 183
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	80 81       	ld	r24, Z
    1208:	8d 32       	cpi	r24, 0x2D	; 45
    120a:	09 f0       	breq	.+2      	; 0x120e <main+0x6c8>
    120c:	05 ce       	rjmp	.-1014   	; 0xe18 <main+0x2d2>
		UART_sendByte('N');
    120e:	8e e4       	ldi	r24, 0x4E	; 78
    1210:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <UART_sendByte>
		LCD_clearScreen();
    1214:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Enter old pass");
    1218:	26 ec       	ldi	r18, 0xC6	; 198
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	a9 01       	movw	r20, r18
    1222:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayStringRowColumn>
		Get_Pass();
    1226:	0e 94 9e 09 	call	0x133c	; 0x133c <Get_Pass>
		ack = UART_recieveByte();
    122a:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <UART_recieveByte>
    122e:	fe 01       	movw	r30, r28
    1230:	e6 5b       	subi	r30, 0xB6	; 182
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	80 83       	st	Z, r24
		if(ack=='T'){break;}
    1236:	fe 01       	movw	r30, r28
    1238:	e6 5b       	subi	r30, 0xB6	; 182
    123a:	ff 4f       	sbci	r31, 0xFF	; 255
    123c:	80 81       	ld	r24, Z
    123e:	84 35       	cpi	r24, 0x54	; 84
    1240:	09 f4       	brne	.+2      	; 0x1244 <main+0x6fe>
    1242:	48 cd       	rjmp	.-1392   	; 0xcd4 <main+0x18e>
		else {
		LCD_clearScreen();
    1244:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Incorrect");
    1248:	26 eb       	ldi	r18, 0xB6	; 182
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	a9 01       	movw	r20, r18
    1252:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayStringRowColumn>
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	aa e7       	ldi	r26, 0x7A	; 122
    125c:	b4 e4       	ldi	r27, 0x44	; 68
    125e:	8b 87       	std	Y+11, r24	; 0x0b
    1260:	9c 87       	std	Y+12, r25	; 0x0c
    1262:	ad 87       	std	Y+13, r26	; 0x0d
    1264:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1266:	6b 85       	ldd	r22, Y+11	; 0x0b
    1268:	7c 85       	ldd	r23, Y+12	; 0x0c
    126a:	8d 85       	ldd	r24, Y+13	; 0x0d
    126c:	9e 85       	ldd	r25, Y+14	; 0x0e
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	4a e7       	ldi	r20, 0x7A	; 122
    1274:	53 e4       	ldi	r21, 0x43	; 67
    1276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	8f 83       	std	Y+7, r24	; 0x07
    1280:	98 87       	std	Y+8, r25	; 0x08
    1282:	a9 87       	std	Y+9, r26	; 0x09
    1284:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1286:	6f 81       	ldd	r22, Y+7	; 0x07
    1288:	78 85       	ldd	r23, Y+8	; 0x08
    128a:	89 85       	ldd	r24, Y+9	; 0x09
    128c:	9a 85       	ldd	r25, Y+10	; 0x0a
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e8       	ldi	r20, 0x80	; 128
    1294:	5f e3       	ldi	r21, 0x3F	; 63
    1296:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    129a:	88 23       	and	r24, r24
    129c:	2c f4       	brge	.+10     	; 0x12a8 <main+0x762>
		__ticks = 1;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9e 83       	std	Y+6, r25	; 0x06
    12a4:	8d 83       	std	Y+5, r24	; 0x05
    12a6:	3f c0       	rjmp	.+126    	; 0x1326 <main+0x7e0>
	else if (__tmp > 65535)
    12a8:	6f 81       	ldd	r22, Y+7	; 0x07
    12aa:	78 85       	ldd	r23, Y+8	; 0x08
    12ac:	89 85       	ldd	r24, Y+9	; 0x09
    12ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	3f ef       	ldi	r19, 0xFF	; 255
    12b4:	4f e7       	ldi	r20, 0x7F	; 127
    12b6:	57 e4       	ldi	r21, 0x47	; 71
    12b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12bc:	18 16       	cp	r1, r24
    12be:	4c f5       	brge	.+82     	; 0x1312 <main+0x7cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e2       	ldi	r20, 0x20	; 32
    12ce:	51 e4       	ldi	r21, 0x41	; 65
    12d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	bc 01       	movw	r22, r24
    12da:	cd 01       	movw	r24, r26
    12dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	9e 83       	std	Y+6, r25	; 0x06
    12e6:	8d 83       	std	Y+5, r24	; 0x05
    12e8:	0f c0       	rjmp	.+30     	; 0x1308 <main+0x7c2>
    12ea:	89 e1       	ldi	r24, 0x19	; 25
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	9c 83       	std	Y+4, r25	; 0x04
    12f0:	8b 83       	std	Y+3, r24	; 0x03
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <main+0x7b0>
    12fa:	9c 83       	std	Y+4, r25	; 0x04
    12fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1300:	9e 81       	ldd	r25, Y+6	; 0x06
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	9e 83       	std	Y+6, r25	; 0x06
    1306:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1308:	8d 81       	ldd	r24, Y+5	; 0x05
    130a:	9e 81       	ldd	r25, Y+6	; 0x06
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	69 f7       	brne	.-38     	; 0x12ea <main+0x7a4>
    1310:	83 cd       	rjmp	.-1274   	; 0xe18 <main+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1312:	6f 81       	ldd	r22, Y+7	; 0x07
    1314:	78 85       	ldd	r23, Y+8	; 0x08
    1316:	89 85       	ldd	r24, Y+9	; 0x09
    1318:	9a 85       	ldd	r25, Y+10	; 0x0a
    131a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	9e 83       	std	Y+6, r25	; 0x06
    1324:	8d 83       	std	Y+5, r24	; 0x05
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	9e 81       	ldd	r25, Y+6	; 0x06
    132a:	9a 83       	std	Y+2, r25	; 0x02
    132c:	89 83       	std	Y+1, r24	; 0x01
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	9a 81       	ldd	r25, Y+2	; 0x02
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <main+0x7ec>
    1336:	9a 83       	std	Y+2, r25	; 0x02
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	6e cd       	rjmp	.-1316   	; 0xe18 <main+0x2d2>

0000133c <Get_Pass>:
		_delay_ms(1000);
	}}}}}}

void Get_Pass(void){
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	60 97       	sbiw	r28, 0x10	; 16
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	uint8 i=0;
    1350:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_moveCursor(1,0);
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_moveCursor>
    135a:	81 c0       	rjmp	.+258    	; 0x145e <Get_Pass+0x122>
	while(i<=3){
		/* if any switch pressed for more than 500 ms it counts more than one press */
		key = KEYPAD_getPressedKey();
    135c:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <KEYPAD_getPressedKey>
    1360:	88 8b       	std	Y+16, r24	; 0x10
		i++;
    1362:	8f 85       	ldd	r24, Y+15	; 0x0f
    1364:	8f 5f       	subi	r24, 0xFF	; 255
    1366:	8f 87       	std	Y+15, r24	; 0x0f
		UART_sendByte(key);
    1368:	88 89       	ldd	r24, Y+16	; 0x10
    136a:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <UART_sendByte>
		/* get the pressed key number */
		if((key <= 9) && (key >= 0))
    136e:	88 89       	ldd	r24, Y+16	; 0x10
    1370:	8a 30       	cpi	r24, 0x0A	; 10
    1372:	18 f4       	brcc	.+6      	; 0x137a <Get_Pass+0x3e>
		{
			LCD_displayCharacter('*'); /* display the pressed keypad switch */
    1374:	8a e2       	ldi	r24, 0x2A	; 42
    1376:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_displayCharacter>
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	aa ef       	ldi	r26, 0xFA	; 250
    1380:	b3 e4       	ldi	r27, 0x43	; 67
    1382:	8b 87       	std	Y+11, r24	; 0x0b
    1384:	9c 87       	std	Y+12, r25	; 0x0c
    1386:	ad 87       	std	Y+13, r26	; 0x0d
    1388:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138a:	6b 85       	ldd	r22, Y+11	; 0x0b
    138c:	7c 85       	ldd	r23, Y+12	; 0x0c
    138e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1390:	9e 85       	ldd	r25, Y+14	; 0x0e
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	4a e7       	ldi	r20, 0x7A	; 122
    1398:	53 e4       	ldi	r21, 0x43	; 67
    139a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	8f 83       	std	Y+7, r24	; 0x07
    13a4:	98 87       	std	Y+8, r25	; 0x08
    13a6:	a9 87       	std	Y+9, r26	; 0x09
    13a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13aa:	6f 81       	ldd	r22, Y+7	; 0x07
    13ac:	78 85       	ldd	r23, Y+8	; 0x08
    13ae:	89 85       	ldd	r24, Y+9	; 0x09
    13b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e8       	ldi	r20, 0x80	; 128
    13b8:	5f e3       	ldi	r21, 0x3F	; 63
    13ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13be:	88 23       	and	r24, r24
    13c0:	2c f4       	brge	.+10     	; 0x13cc <Get_Pass+0x90>
		__ticks = 1;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	9e 83       	std	Y+6, r25	; 0x06
    13c8:	8d 83       	std	Y+5, r24	; 0x05
    13ca:	3f c0       	rjmp	.+126    	; 0x144a <Get_Pass+0x10e>
	else if (__tmp > 65535)
    13cc:	6f 81       	ldd	r22, Y+7	; 0x07
    13ce:	78 85       	ldd	r23, Y+8	; 0x08
    13d0:	89 85       	ldd	r24, Y+9	; 0x09
    13d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	3f ef       	ldi	r19, 0xFF	; 255
    13d8:	4f e7       	ldi	r20, 0x7F	; 127
    13da:	57 e4       	ldi	r21, 0x47	; 71
    13dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e0:	18 16       	cp	r1, r24
    13e2:	4c f5       	brge	.+82     	; 0x1436 <Get_Pass+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	40 e2       	ldi	r20, 0x20	; 32
    13f2:	51 e4       	ldi	r21, 0x41	; 65
    13f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	bc 01       	movw	r22, r24
    13fe:	cd 01       	movw	r24, r26
    1400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	9e 83       	std	Y+6, r25	; 0x06
    140a:	8d 83       	std	Y+5, r24	; 0x05
    140c:	0f c0       	rjmp	.+30     	; 0x142c <Get_Pass+0xf0>
    140e:	89 e1       	ldi	r24, 0x19	; 25
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	9c 83       	std	Y+4, r25	; 0x04
    1414:	8b 83       	std	Y+3, r24	; 0x03
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	f1 f7       	brne	.-4      	; 0x141a <Get_Pass+0xde>
    141e:	9c 83       	std	Y+4, r25	; 0x04
    1420:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1422:	8d 81       	ldd	r24, Y+5	; 0x05
    1424:	9e 81       	ldd	r25, Y+6	; 0x06
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	69 f7       	brne	.-38     	; 0x140e <Get_Pass+0xd2>
    1434:	14 c0       	rjmp	.+40     	; 0x145e <Get_Pass+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1436:	6f 81       	ldd	r22, Y+7	; 0x07
    1438:	78 85       	ldd	r23, Y+8	; 0x08
    143a:	89 85       	ldd	r24, Y+9	; 0x09
    143c:	9a 85       	ldd	r25, Y+10	; 0x0a
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 83       	std	Y+5, r24	; 0x05
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	9a 83       	std	Y+2, r25	; 0x02
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	9a 81       	ldd	r25, Y+2	; 0x02
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <Get_Pass+0x11a>
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	89 83       	std	Y+1, r24	; 0x01

void Get_Pass(void){
	uint8 key;
	uint8 i=0;
	LCD_moveCursor(1,0);
	while(i<=3){
    145e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1460:	84 30       	cpi	r24, 0x04	; 4
    1462:	08 f4       	brcc	.+2      	; 0x1466 <Get_Pass+0x12a>
    1464:	7b cf       	rjmp	.-266    	; 0x135c <Get_Pass+0x20>
		if((key <= 9) && (key >= 0))
		{
			LCD_displayCharacter('*'); /* display the pressed keypad switch */
		}
		_delay_ms(500); /* Press time */
    }}
    1466:	60 96       	adiw	r28, 0x10	; 16
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <New_Pass>:
void New_Pass(void){
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
	LCD_displayStringRowColumn(0,0,"Make password");
    1480:	25 ed       	ldi	r18, 0xD5	; 213
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	a9 01       	movw	r20, r18
    148a:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_moveCursor>
	Get_Pass();
    1496:	0e 94 9e 09 	call	0x133c	; 0x133c <Get_Pass>
	LCD_clearScreen();
    149a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Reenter password");
    149e:	23 ee       	ldi	r18, 0xE3	; 227
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	a9 01       	movw	r20, r18
    14a8:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_moveCursor>
	Get_Pass();
    14b4:	0e 94 9e 09 	call	0x133c	; 0x133c <Get_Pass>
	LCD_clearScreen();
    14b8:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_clearScreen>
}
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <closing>:
void closing(void){
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
	SREG &=~(1<<7);
    14ca:	af e5       	ldi	r26, 0x5F	; 95
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	ef e5       	ldi	r30, 0x5F	; 95
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8f 77       	andi	r24, 0x7F	; 127
    14d6:	8c 93       	st	X, r24
	Timer_dinit();
    14d8:	0e 94 8a 14 	call	0x2914	; 0x2914 <Timer_dinit>
	LCD_clearScreen();
    14dc:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Test");
    14e0:	24 ef       	ldi	r18, 0xF4	; 244
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	a9 01       	movw	r20, r18
    14ea:	0e 94 35 13 	call	0x266a	; 0x266a <LCD_displayStringRowColumn>
}
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <delay>:
void delay(void){
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
	Timer_dinit();
    14fc:	0e 94 8a 14 	call	0x2914	; 0x2914 <Timer_dinit>
	flag=0;
    1500:	10 92 01 01 	sts	0x0101, r1
}
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	00 d0       	rcall	.+0      	; 0x1510 <GPIO_setupPinDirection+0x6>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <GPIO_setupPinDirection+0x8>
    1512:	0f 92       	push	r0
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	89 83       	std	Y+1, r24	; 0x01
    151a:	6a 83       	std	Y+2, r22	; 0x02
    151c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	88 30       	cpi	r24, 0x08	; 8
    1522:	08 f0       	brcs	.+2      	; 0x1526 <GPIO_setupPinDirection+0x1c>
    1524:	d5 c0       	rjmp	.+426    	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	84 30       	cpi	r24, 0x04	; 4
    152a:	08 f0       	brcs	.+2      	; 0x152e <GPIO_setupPinDirection+0x24>
    152c:	d1 c0       	rjmp	.+418    	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	3d 83       	std	Y+5, r19	; 0x05
    1536:	2c 83       	std	Y+4, r18	; 0x04
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
    153a:	9d 81       	ldd	r25, Y+5	; 0x05
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	91 05       	cpc	r25, r1
    1540:	09 f4       	brne	.+2      	; 0x1544 <GPIO_setupPinDirection+0x3a>
    1542:	43 c0       	rjmp	.+134    	; 0x15ca <GPIO_setupPinDirection+0xc0>
    1544:	2c 81       	ldd	r18, Y+4	; 0x04
    1546:	3d 81       	ldd	r19, Y+5	; 0x05
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	2c f4       	brge	.+10     	; 0x1558 <GPIO_setupPinDirection+0x4e>
    154e:	8c 81       	ldd	r24, Y+4	; 0x04
    1550:	9d 81       	ldd	r25, Y+5	; 0x05
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	71 f0       	breq	.+28     	; 0x1572 <GPIO_setupPinDirection+0x68>
    1556:	bc c0       	rjmp	.+376    	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
    1558:	2c 81       	ldd	r18, Y+4	; 0x04
    155a:	3d 81       	ldd	r19, Y+5	; 0x05
    155c:	22 30       	cpi	r18, 0x02	; 2
    155e:	31 05       	cpc	r19, r1
    1560:	09 f4       	brne	.+2      	; 0x1564 <GPIO_setupPinDirection+0x5a>
    1562:	5f c0       	rjmp	.+190    	; 0x1622 <GPIO_setupPinDirection+0x118>
    1564:	8c 81       	ldd	r24, Y+4	; 0x04
    1566:	9d 81       	ldd	r25, Y+5	; 0x05
    1568:	83 30       	cpi	r24, 0x03	; 3
    156a:	91 05       	cpc	r25, r1
    156c:	09 f4       	brne	.+2      	; 0x1570 <GPIO_setupPinDirection+0x66>
    156e:	85 c0       	rjmp	.+266    	; 0x167a <GPIO_setupPinDirection+0x170>
    1570:	af c0       	rjmp	.+350    	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	a1 f4       	brne	.+40     	; 0x15a0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1578:	aa e3       	ldi	r26, 0x3A	; 58
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	ea e3       	ldi	r30, 0x3A	; 58
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <GPIO_setupPinDirection+0x8c>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <GPIO_setupPinDirection+0x88>
    159a:	84 2b       	or	r24, r20
    159c:	8c 93       	st	X, r24
    159e:	98 c0       	rjmp	.+304    	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    15a0:	aa e3       	ldi	r26, 0x3A	; 58
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	ea e3       	ldi	r30, 0x3A	; 58
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <GPIO_setupPinDirection+0xb4>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <GPIO_setupPinDirection+0xb0>
    15c2:	80 95       	com	r24
    15c4:	84 23       	and	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	83 c0       	rjmp	.+262    	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	a1 f4       	brne	.+40     	; 0x15f8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    15d0:	a7 e3       	ldi	r26, 0x37	; 55
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e7 e3       	ldi	r30, 0x37	; 55
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <GPIO_setupPinDirection+0xe4>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <GPIO_setupPinDirection+0xe0>
    15f2:	84 2b       	or	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	6c c0       	rjmp	.+216    	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    15f8:	a7 e3       	ldi	r26, 0x37	; 55
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e7 e3       	ldi	r30, 0x37	; 55
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <GPIO_setupPinDirection+0x10c>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <GPIO_setupPinDirection+0x108>
    161a:	80 95       	com	r24
    161c:	84 23       	and	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	57 c0       	rjmp	.+174    	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	a1 f4       	brne	.+40     	; 0x1650 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1628:	a4 e3       	ldi	r26, 0x34	; 52
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e4 e3       	ldi	r30, 0x34	; 52
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <GPIO_setupPinDirection+0x13c>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <GPIO_setupPinDirection+0x138>
    164a:	84 2b       	or	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	40 c0       	rjmp	.+128    	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1650:	a4 e3       	ldi	r26, 0x34	; 52
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e4 e3       	ldi	r30, 0x34	; 52
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 2e       	mov	r0, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <GPIO_setupPinDirection+0x164>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	0a 94       	dec	r0
    1670:	e2 f7       	brpl	.-8      	; 0x166a <GPIO_setupPinDirection+0x160>
    1672:	80 95       	com	r24
    1674:	84 23       	and	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	2b c0       	rjmp	.+86     	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	a1 f4       	brne	.+40     	; 0x16a8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1680:	a1 e3       	ldi	r26, 0x31	; 49
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e1 e3       	ldi	r30, 0x31	; 49
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <GPIO_setupPinDirection+0x194>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <GPIO_setupPinDirection+0x190>
    16a2:	84 2b       	or	r24, r20
    16a4:	8c 93       	st	X, r24
    16a6:	14 c0       	rjmp	.+40     	; 0x16d0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    16a8:	a1 e3       	ldi	r26, 0x31	; 49
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e1 e3       	ldi	r30, 0x31	; 49
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 2e       	mov	r0, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <GPIO_setupPinDirection+0x1bc>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	0a 94       	dec	r0
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <GPIO_setupPinDirection+0x1b8>
    16ca:	80 95       	com	r24
    16cc:	84 23       	and	r24, r20
    16ce:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <GPIO_writePin+0x6>
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <GPIO_writePin+0x8>
    16e8:	0f 92       	push	r0
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	6a 83       	std	Y+2, r22	; 0x02
    16f2:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	88 30       	cpi	r24, 0x08	; 8
    16f8:	08 f0       	brcs	.+2      	; 0x16fc <GPIO_writePin+0x1c>
    16fa:	d5 c0       	rjmp	.+426    	; 0x18a6 <GPIO_writePin+0x1c6>
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	84 30       	cpi	r24, 0x04	; 4
    1700:	08 f0       	brcs	.+2      	; 0x1704 <GPIO_writePin+0x24>
    1702:	d1 c0       	rjmp	.+418    	; 0x18a6 <GPIO_writePin+0x1c6>
			/* Do Nothing */
		}
		else
		{
			/* Setup the pin direction as required */
			switch(port_num)
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	3d 83       	std	Y+5, r19	; 0x05
    170c:	2c 83       	std	Y+4, r18	; 0x04
    170e:	8c 81       	ldd	r24, Y+4	; 0x04
    1710:	9d 81       	ldd	r25, Y+5	; 0x05
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	91 05       	cpc	r25, r1
    1716:	09 f4       	brne	.+2      	; 0x171a <GPIO_writePin+0x3a>
    1718:	43 c0       	rjmp	.+134    	; 0x17a0 <GPIO_writePin+0xc0>
    171a:	2c 81       	ldd	r18, Y+4	; 0x04
    171c:	3d 81       	ldd	r19, Y+5	; 0x05
    171e:	22 30       	cpi	r18, 0x02	; 2
    1720:	31 05       	cpc	r19, r1
    1722:	2c f4       	brge	.+10     	; 0x172e <GPIO_writePin+0x4e>
    1724:	8c 81       	ldd	r24, Y+4	; 0x04
    1726:	9d 81       	ldd	r25, Y+5	; 0x05
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	71 f0       	breq	.+28     	; 0x1748 <GPIO_writePin+0x68>
    172c:	bc c0       	rjmp	.+376    	; 0x18a6 <GPIO_writePin+0x1c6>
    172e:	2c 81       	ldd	r18, Y+4	; 0x04
    1730:	3d 81       	ldd	r19, Y+5	; 0x05
    1732:	22 30       	cpi	r18, 0x02	; 2
    1734:	31 05       	cpc	r19, r1
    1736:	09 f4       	brne	.+2      	; 0x173a <GPIO_writePin+0x5a>
    1738:	5f c0       	rjmp	.+190    	; 0x17f8 <GPIO_writePin+0x118>
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	9d 81       	ldd	r25, Y+5	; 0x05
    173e:	83 30       	cpi	r24, 0x03	; 3
    1740:	91 05       	cpc	r25, r1
    1742:	09 f4       	brne	.+2      	; 0x1746 <GPIO_writePin+0x66>
    1744:	85 c0       	rjmp	.+266    	; 0x1850 <GPIO_writePin+0x170>
    1746:	af c0       	rjmp	.+350    	; 0x18a6 <GPIO_writePin+0x1c6>
			{
			case PORTA_ID:
				if(value == LOGIC_HIGH)
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	a1 f4       	brne	.+40     	; 0x1776 <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA,pin_num);
    174e:	ab e3       	ldi	r26, 0x3B	; 59
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	eb e3       	ldi	r30, 0x3B	; 59
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	48 2f       	mov	r20, r24
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 2e       	mov	r0, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <GPIO_writePin+0x8c>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <GPIO_writePin+0x88>
    1770:	84 2b       	or	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	98 c0       	rjmp	.+304    	; 0x18a6 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA,pin_num);
    1776:	ab e3       	ldi	r26, 0x3B	; 59
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	eb e3       	ldi	r30, 0x3B	; 59
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	48 2f       	mov	r20, r24
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 2e       	mov	r0, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <GPIO_writePin+0xb4>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	0a 94       	dec	r0
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <GPIO_writePin+0xb0>
    1798:	80 95       	com	r24
    179a:	84 23       	and	r24, r20
    179c:	8c 93       	st	X, r24
    179e:	83 c0       	rjmp	.+262    	; 0x18a6 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTB_ID:
				if(value == LOGIC_HIGH)
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	a1 f4       	brne	.+40     	; 0x17ce <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB,pin_num);
    17a6:	a8 e3       	ldi	r26, 0x38	; 56
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e8 e3       	ldi	r30, 0x38	; 56
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 2e       	mov	r0, r18
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <GPIO_writePin+0xe4>
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	0a 94       	dec	r0
    17c6:	e2 f7       	brpl	.-8      	; 0x17c0 <GPIO_writePin+0xe0>
    17c8:	84 2b       	or	r24, r20
    17ca:	8c 93       	st	X, r24
    17cc:	6c c0       	rjmp	.+216    	; 0x18a6 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB,pin_num);
    17ce:	a8 e3       	ldi	r26, 0x38	; 56
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e8 e3       	ldi	r30, 0x38	; 56
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	48 2f       	mov	r20, r24
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	02 2e       	mov	r0, r18
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <GPIO_writePin+0x10c>
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	0a 94       	dec	r0
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <GPIO_writePin+0x108>
    17f0:	80 95       	com	r24
    17f2:	84 23       	and	r24, r20
    17f4:	8c 93       	st	X, r24
    17f6:	57 c0       	rjmp	.+174    	; 0x18a6 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTC_ID:
				if(value == LOGIC_HIGH)
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	a1 f4       	brne	.+40     	; 0x1826 <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC,pin_num);
    17fe:	a5 e3       	ldi	r26, 0x35	; 53
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	e5 e3       	ldi	r30, 0x35	; 53
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	80 81       	ld	r24, Z
    1808:	48 2f       	mov	r20, r24
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	02 2e       	mov	r0, r18
    1816:	02 c0       	rjmp	.+4      	; 0x181c <GPIO_writePin+0x13c>
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	0a 94       	dec	r0
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <GPIO_writePin+0x138>
    1820:	84 2b       	or	r24, r20
    1822:	8c 93       	st	X, r24
    1824:	40 c0       	rjmp	.+128    	; 0x18a6 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC,pin_num);
    1826:	a5 e3       	ldi	r26, 0x35	; 53
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e5 e3       	ldi	r30, 0x35	; 53
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	48 2f       	mov	r20, r24
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	02 2e       	mov	r0, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <GPIO_writePin+0x164>
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	0a 94       	dec	r0
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <GPIO_writePin+0x160>
    1848:	80 95       	com	r24
    184a:	84 23       	and	r24, r20
    184c:	8c 93       	st	X, r24
    184e:	2b c0       	rjmp	.+86     	; 0x18a6 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTD_ID:
				if(value == LOGIC_HIGH)
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	a1 f4       	brne	.+40     	; 0x187e <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD,pin_num);
    1856:	a2 e3       	ldi	r26, 0x32	; 50
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e2 e3       	ldi	r30, 0x32	; 50
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	48 2f       	mov	r20, r24
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	02 2e       	mov	r0, r18
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <GPIO_writePin+0x194>
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	0a 94       	dec	r0
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <GPIO_writePin+0x190>
    1878:	84 2b       	or	r24, r20
    187a:	8c 93       	st	X, r24
    187c:	14 c0       	rjmp	.+40     	; 0x18a6 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD,pin_num);
    187e:	a2 e3       	ldi	r26, 0x32	; 50
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e2 e3       	ldi	r30, 0x32	; 50
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	48 2f       	mov	r20, r24
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 2e       	mov	r0, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <GPIO_writePin+0x1bc>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	0a 94       	dec	r0
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <GPIO_writePin+0x1b8>
    18a0:	80 95       	com	r24
    18a2:	84 23       	and	r24, r20
    18a4:	8c 93       	st	X, r24
				}
				break;
			}
		}

}
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <GPIO_readPin+0x6>
    18bc:	00 d0       	rcall	.+0      	; 0x18be <GPIO_readPin+0x8>
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <GPIO_readPin+0xa>
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	88 30       	cpi	r24, 0x08	; 8
    18cc:	08 f0       	brcs	.+2      	; 0x18d0 <GPIO_readPin+0x1a>
    18ce:	85 c0       	rjmp	.+266    	; 0x19da <GPIO_readPin+0x124>
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	84 30       	cpi	r24, 0x04	; 4
    18d4:	08 f0       	brcs	.+2      	; 0x18d8 <GPIO_readPin+0x22>
    18d6:	81 c0       	rjmp	.+258    	; 0x19da <GPIO_readPin+0x124>
				/* Do Nothing */
			}
			else
			{
				/* Setup the pin direction as required */
				switch(port_num)
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	3d 83       	std	Y+5, r19	; 0x05
    18e0:	2c 83       	std	Y+4, r18	; 0x04
    18e2:	4c 81       	ldd	r20, Y+4	; 0x04
    18e4:	5d 81       	ldd	r21, Y+5	; 0x05
    18e6:	41 30       	cpi	r20, 0x01	; 1
    18e8:	51 05       	cpc	r21, r1
    18ea:	79 f1       	breq	.+94     	; 0x194a <GPIO_readPin+0x94>
    18ec:	8c 81       	ldd	r24, Y+4	; 0x04
    18ee:	9d 81       	ldd	r25, Y+5	; 0x05
    18f0:	82 30       	cpi	r24, 0x02	; 2
    18f2:	91 05       	cpc	r25, r1
    18f4:	34 f4       	brge	.+12     	; 0x1902 <GPIO_readPin+0x4c>
    18f6:	2c 81       	ldd	r18, Y+4	; 0x04
    18f8:	3d 81       	ldd	r19, Y+5	; 0x05
    18fa:	21 15       	cp	r18, r1
    18fc:	31 05       	cpc	r19, r1
    18fe:	69 f0       	breq	.+26     	; 0x191a <GPIO_readPin+0x64>
    1900:	6c c0       	rjmp	.+216    	; 0x19da <GPIO_readPin+0x124>
    1902:	4c 81       	ldd	r20, Y+4	; 0x04
    1904:	5d 81       	ldd	r21, Y+5	; 0x05
    1906:	42 30       	cpi	r20, 0x02	; 2
    1908:	51 05       	cpc	r21, r1
    190a:	b9 f1       	breq	.+110    	; 0x197a <GPIO_readPin+0xc4>
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	9d 81       	ldd	r25, Y+5	; 0x05
    1910:	83 30       	cpi	r24, 0x03	; 3
    1912:	91 05       	cpc	r25, r1
    1914:	09 f4       	brne	.+2      	; 0x1918 <GPIO_readPin+0x62>
    1916:	49 c0       	rjmp	.+146    	; 0x19aa <GPIO_readPin+0xf4>
    1918:	60 c0       	rjmp	.+192    	; 0x19da <GPIO_readPin+0x124>
				{
				case PORTA_ID:
					if(BIT_IS_SET(PINA,pin_num))
    191a:	e9 e3       	ldi	r30, 0x39	; 57
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a9 01       	movw	r20, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <GPIO_readPin+0x7c>
    192e:	55 95       	asr	r21
    1930:	47 95       	ror	r20
    1932:	8a 95       	dec	r24
    1934:	e2 f7       	brpl	.-8      	; 0x192e <GPIO_readPin+0x78>
    1936:	ca 01       	movw	r24, r20
    1938:	81 70       	andi	r24, 0x01	; 1
    193a:	90 70       	andi	r25, 0x00	; 0
    193c:	88 23       	and	r24, r24
    193e:	19 f0       	breq	.+6      	; 0x1946 <GPIO_readPin+0x90>
					{
						return LOGIC_HIGH;
    1940:	51 e0       	ldi	r21, 0x01	; 1
    1942:	5b 83       	std	Y+3, r21	; 0x03
    1944:	4b c0       	rjmp	.+150    	; 0x19dc <GPIO_readPin+0x126>
					}
					else
					{
						return LOGIC_LOW;
    1946:	1b 82       	std	Y+3, r1	; 0x03
    1948:	49 c0       	rjmp	.+146    	; 0x19dc <GPIO_readPin+0x126>
					}
					break;
				case PORTB_ID:
					if(BIT_IS_SET(PINB,pin_num))
    194a:	e6 e3       	ldi	r30, 0x36	; 54
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a9 01       	movw	r20, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <GPIO_readPin+0xac>
    195e:	55 95       	asr	r21
    1960:	47 95       	ror	r20
    1962:	8a 95       	dec	r24
    1964:	e2 f7       	brpl	.-8      	; 0x195e <GPIO_readPin+0xa8>
    1966:	ca 01       	movw	r24, r20
    1968:	81 70       	andi	r24, 0x01	; 1
    196a:	90 70       	andi	r25, 0x00	; 0
    196c:	88 23       	and	r24, r24
    196e:	19 f0       	breq	.+6      	; 0x1976 <GPIO_readPin+0xc0>
					{
						return LOGIC_HIGH;
    1970:	51 e0       	ldi	r21, 0x01	; 1
    1972:	5b 83       	std	Y+3, r21	; 0x03
    1974:	33 c0       	rjmp	.+102    	; 0x19dc <GPIO_readPin+0x126>
					}
					else
					{
						return LOGIC_LOW;
    1976:	1b 82       	std	Y+3, r1	; 0x03
    1978:	31 c0       	rjmp	.+98     	; 0x19dc <GPIO_readPin+0x126>
					}
					break;
				case PORTC_ID:
					if(BIT_IS_SET(PINC,pin_num))
    197a:	e3 e3       	ldi	r30, 0x33	; 51
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	88 2f       	mov	r24, r24
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	a9 01       	movw	r20, r18
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <GPIO_readPin+0xdc>
    198e:	55 95       	asr	r21
    1990:	47 95       	ror	r20
    1992:	8a 95       	dec	r24
    1994:	e2 f7       	brpl	.-8      	; 0x198e <GPIO_readPin+0xd8>
    1996:	ca 01       	movw	r24, r20
    1998:	81 70       	andi	r24, 0x01	; 1
    199a:	90 70       	andi	r25, 0x00	; 0
    199c:	88 23       	and	r24, r24
    199e:	19 f0       	breq	.+6      	; 0x19a6 <GPIO_readPin+0xf0>
					{
						return LOGIC_HIGH;
    19a0:	51 e0       	ldi	r21, 0x01	; 1
    19a2:	5b 83       	std	Y+3, r21	; 0x03
    19a4:	1b c0       	rjmp	.+54     	; 0x19dc <GPIO_readPin+0x126>
					}
					else
					{
						return LOGIC_LOW;
    19a6:	1b 82       	std	Y+3, r1	; 0x03
    19a8:	19 c0       	rjmp	.+50     	; 0x19dc <GPIO_readPin+0x126>
					}
					break;
				case PORTD_ID:
					if(BIT_IS_SET(PIND,pin_num))
    19aa:	e0 e3       	ldi	r30, 0x30	; 48
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	88 2f       	mov	r24, r24
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a9 01       	movw	r20, r18
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <GPIO_readPin+0x10c>
    19be:	55 95       	asr	r21
    19c0:	47 95       	ror	r20
    19c2:	8a 95       	dec	r24
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <GPIO_readPin+0x108>
    19c6:	ca 01       	movw	r24, r20
    19c8:	81 70       	andi	r24, 0x01	; 1
    19ca:	90 70       	andi	r25, 0x00	; 0
    19cc:	88 23       	and	r24, r24
    19ce:	19 f0       	breq	.+6      	; 0x19d6 <GPIO_readPin+0x120>
					{
						return LOGIC_HIGH;
    19d0:	51 e0       	ldi	r21, 0x01	; 1
    19d2:	5b 83       	std	Y+3, r21	; 0x03
    19d4:	03 c0       	rjmp	.+6      	; 0x19dc <GPIO_readPin+0x126>
					}
					else
					{
						return LOGIC_LOW;
    19d6:	1b 82       	std	Y+3, r1	; 0x03
    19d8:	01 c0       	rjmp	.+2      	; 0x19dc <GPIO_readPin+0x126>
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <GPIO_readPin+0x12a>
					}
					break;
				}
			}
}
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	8e 83       	std	Y+6, r24	; 0x06
    19e0:	8e 81       	ldd	r24, Y+6	; 0x06
    19e2:	26 96       	adiw	r28, 0x06	; 6
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	08 95       	ret

000019f4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <GPIO_setupPortDirection+0x6>
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <GPIO_setupPortDirection+0x8>
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	89 83       	std	Y+1, r24	; 0x01
    1a02:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	84 30       	cpi	r24, 0x04	; 4
    1a08:	90 f5       	brcc	.+100    	; 0x1a6e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	3c 83       	std	Y+4, r19	; 0x04
    1a12:	2b 83       	std	Y+3, r18	; 0x03
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	81 30       	cpi	r24, 0x01	; 1
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	d1 f0       	breq	.+52     	; 0x1a52 <GPIO_setupPortDirection+0x5e>
    1a1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a20:	3c 81       	ldd	r19, Y+4	; 0x04
    1a22:	22 30       	cpi	r18, 0x02	; 2
    1a24:	31 05       	cpc	r19, r1
    1a26:	2c f4       	brge	.+10     	; 0x1a32 <GPIO_setupPortDirection+0x3e>
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	61 f0       	breq	.+24     	; 0x1a48 <GPIO_setupPortDirection+0x54>
    1a30:	1e c0       	rjmp	.+60     	; 0x1a6e <GPIO_setupPortDirection+0x7a>
    1a32:	2b 81       	ldd	r18, Y+3	; 0x03
    1a34:	3c 81       	ldd	r19, Y+4	; 0x04
    1a36:	22 30       	cpi	r18, 0x02	; 2
    1a38:	31 05       	cpc	r19, r1
    1a3a:	81 f0       	breq	.+32     	; 0x1a5c <GPIO_setupPortDirection+0x68>
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	83 30       	cpi	r24, 0x03	; 3
    1a42:	91 05       	cpc	r25, r1
    1a44:	81 f0       	breq	.+32     	; 0x1a66 <GPIO_setupPortDirection+0x72>
    1a46:	13 c0       	rjmp	.+38     	; 0x1a6e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a48:	ea e3       	ldi	r30, 0x3A	; 58
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	80 83       	st	Z, r24
    1a50:	0e c0       	rjmp	.+28     	; 0x1a6e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a52:	e7 e3       	ldi	r30, 0x37	; 55
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	80 83       	st	Z, r24
    1a5a:	09 c0       	rjmp	.+18     	; 0x1a6e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a5c:	e4 e3       	ldi	r30, 0x34	; 52
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	80 83       	st	Z, r24
    1a64:	04 c0       	rjmp	.+8      	; 0x1a6e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a66:	e1 e3       	ldi	r30, 0x31	; 49
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <GPIO_writePort+0x6>
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <GPIO_writePort+0x8>
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	84 30       	cpi	r24, 0x04	; 4
    1a90:	90 f5       	brcc	.+100    	; 0x1af6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	3c 83       	std	Y+4, r19	; 0x04
    1a9a:	2b 83       	std	Y+3, r18	; 0x03
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	81 30       	cpi	r24, 0x01	; 1
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	d1 f0       	breq	.+52     	; 0x1ada <GPIO_writePort+0x5e>
    1aa6:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aaa:	22 30       	cpi	r18, 0x02	; 2
    1aac:	31 05       	cpc	r19, r1
    1aae:	2c f4       	brge	.+10     	; 0x1aba <GPIO_writePort+0x3e>
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	00 97       	sbiw	r24, 0x00	; 0
    1ab6:	61 f0       	breq	.+24     	; 0x1ad0 <GPIO_writePort+0x54>
    1ab8:	1e c0       	rjmp	.+60     	; 0x1af6 <GPIO_writePort+0x7a>
    1aba:	2b 81       	ldd	r18, Y+3	; 0x03
    1abc:	3c 81       	ldd	r19, Y+4	; 0x04
    1abe:	22 30       	cpi	r18, 0x02	; 2
    1ac0:	31 05       	cpc	r19, r1
    1ac2:	81 f0       	breq	.+32     	; 0x1ae4 <GPIO_writePort+0x68>
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac8:	83 30       	cpi	r24, 0x03	; 3
    1aca:	91 05       	cpc	r25, r1
    1acc:	81 f0       	breq	.+32     	; 0x1aee <GPIO_writePort+0x72>
    1ace:	13 c0       	rjmp	.+38     	; 0x1af6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ad0:	eb e3       	ldi	r30, 0x3B	; 59
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	80 83       	st	Z, r24
    1ad8:	0e c0       	rjmp	.+28     	; 0x1af6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1ada:	e8 e3       	ldi	r30, 0x38	; 56
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	80 83       	st	Z, r24
    1ae2:	09 c0       	rjmp	.+18     	; 0x1af6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1ae4:	e5 e3       	ldi	r30, 0x35	; 53
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	80 83       	st	Z, r24
    1aec:	04 c0       	rjmp	.+8      	; 0x1af6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1aee:	e2 e3       	ldi	r30, 0x32	; 50
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	80 83       	st	Z, r24
			break;
		}
	}

}
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <GPIO_readPort+0x6>
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <GPIO_readPort+0x8>
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value;
	if(port_num >= NUM_OF_PORTS)
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	84 30       	cpi	r24, 0x04	; 4
    1b16:	90 f5       	brcc	.+100    	; 0x1b7c <GPIO_readPort+0x78>
				/* Do Nothing */
			}
			else
			{
				/* Setup the pin direction as required */
				switch(port_num)
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	3c 83       	std	Y+4, r19	; 0x04
    1b20:	2b 83       	std	Y+3, r18	; 0x03
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	9c 81       	ldd	r25, Y+4	; 0x04
    1b26:	81 30       	cpi	r24, 0x01	; 1
    1b28:	91 05       	cpc	r25, r1
    1b2a:	d1 f0       	breq	.+52     	; 0x1b60 <GPIO_readPort+0x5c>
    1b2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b30:	22 30       	cpi	r18, 0x02	; 2
    1b32:	31 05       	cpc	r19, r1
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <GPIO_readPort+0x3c>
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	61 f0       	breq	.+24     	; 0x1b56 <GPIO_readPort+0x52>
    1b3e:	1e c0       	rjmp	.+60     	; 0x1b7c <GPIO_readPort+0x78>
    1b40:	2b 81       	ldd	r18, Y+3	; 0x03
    1b42:	3c 81       	ldd	r19, Y+4	; 0x04
    1b44:	22 30       	cpi	r18, 0x02	; 2
    1b46:	31 05       	cpc	r19, r1
    1b48:	81 f0       	breq	.+32     	; 0x1b6a <GPIO_readPort+0x66>
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4e:	83 30       	cpi	r24, 0x03	; 3
    1b50:	91 05       	cpc	r25, r1
    1b52:	81 f0       	breq	.+32     	; 0x1b74 <GPIO_readPort+0x70>
    1b54:	13 c0       	rjmp	.+38     	; 0x1b7c <GPIO_readPort+0x78>
				{
				case PORTA_ID:
					value= PINA;
    1b56:	e9 e3       	ldi	r30, 0x39	; 57
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	89 83       	std	Y+1, r24	; 0x01
    1b5e:	0e c0       	rjmp	.+28     	; 0x1b7c <GPIO_readPort+0x78>
					break;
				case PORTB_ID:
					value= PINB;
    1b60:	e6 e3       	ldi	r30, 0x36	; 54
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	09 c0       	rjmp	.+18     	; 0x1b7c <GPIO_readPort+0x78>
					break;
				case PORTC_ID:
					value =PINC;
    1b6a:	e3 e3       	ldi	r30, 0x33	; 51
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	04 c0       	rjmp	.+8      	; 0x1b7c <GPIO_readPort+0x78>
					break;
				case PORTD_ID:
					value=PIND;
    1b74:	e0 e3       	ldi	r30, 0x30	; 48
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
			}
	return value;
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <KEYPAD_getPressedKey+0x6>
    1b92:	0f 92       	push	r0
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1b98:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1b9a:	1b 82       	std	Y+3, r1	; 0x03
    1b9c:	42 c0       	rjmp	.+132    	; 0x1c22 <KEYPAD_getPressedKey+0x96>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	98 2f       	mov	r25, r24
    1baa:	9c 5f       	subi	r25, 0xFC	; 252
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	69 2f       	mov	r22, r25
    1bb0:	41 e0       	ldi	r20, 0x01	; 1
    1bb2:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_setupPinDirection>
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	88 2f       	mov	r24, r24
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	9c 01       	movw	r18, r24
    1bbe:	2c 5f       	subi	r18, 0xFC	; 252
    1bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <KEYPAD_getPressedKey+0x40>
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	2a 95       	dec	r18
    1bce:	e2 f7       	brpl	.-8      	; 0x1bc8 <KEYPAD_getPressedKey+0x3c>
    1bd0:	89 83       	std	Y+1, r24	; 0x01
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	69 81       	ldd	r22, Y+1	; 0x01
    1bd6:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1bda:	1a 82       	std	Y+2, r1	; 0x02
    1bdc:	1c c0       	rjmp	.+56     	; 0x1c16 <KEYPAD_getPressedKey+0x8a>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	6a 81       	ldd	r22, Y+2	; 0x02
    1be2:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <GPIO_readPin>
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	99 f4       	brne	.+38     	; 0x1c10 <KEYPAD_getPressedKey+0x84>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	88 2f       	mov	r24, r24
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	98 2f       	mov	r25, r24
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	89 0f       	add	r24, r25
    1bfe:	8f 5f       	subi	r24, 0xFF	; 255
    1c00:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	cf 91       	pop	r28
    1c0c:	df 91       	pop	r29
    1c0e:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	8f 5f       	subi	r24, 0xFF	; 255
    1c14:	8a 83       	std	Y+2, r24	; 0x02
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	84 30       	cpi	r24, 0x04	; 4
    1c1a:	08 f3       	brcs	.-62     	; 0x1bde <KEYPAD_getPressedKey+0x52>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	8f 5f       	subi	r24, 0xFF	; 255
    1c20:	8b 83       	std	Y+3, r24	; 0x03
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	84 30       	cpi	r24, 0x04	; 4
    1c26:	08 f4       	brcc	.+2      	; 0x1c2a <KEYPAD_getPressedKey+0x9e>
    1c28:	ba cf       	rjmp	.-140    	; 0x1b9e <KEYPAD_getPressedKey+0x12>
    1c2a:	b7 cf       	rjmp	.-146    	; 0x1b9a <KEYPAD_getPressedKey+0xe>

00001c2c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1c3a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	3c 83       	std	Y+4, r19	; 0x04
    1c44:	2b 83       	std	Y+3, r18	; 0x03
    1c46:	8b 81       	ldd	r24, Y+3	; 0x03
    1c48:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4a:	88 30       	cpi	r24, 0x08	; 8
    1c4c:	91 05       	cpc	r25, r1
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1c50:	70 c0       	rjmp	.+224    	; 0x1d32 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1c52:	2b 81       	ldd	r18, Y+3	; 0x03
    1c54:	3c 81       	ldd	r19, Y+4	; 0x04
    1c56:	29 30       	cpi	r18, 0x09	; 9
    1c58:	31 05       	cpc	r19, r1
    1c5a:	5c f5       	brge	.+86     	; 0x1cb2 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	84 30       	cpi	r24, 0x04	; 4
    1c62:	91 05       	cpc	r25, r1
    1c64:	09 f4       	brne	.+2      	; 0x1c68 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1c66:	59 c0       	rjmp	.+178    	; 0x1d1a <KEYPAD_4x4_adjustKeyNumber+0xee>
    1c68:	2b 81       	ldd	r18, Y+3	; 0x03
    1c6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c6c:	25 30       	cpi	r18, 0x05	; 5
    1c6e:	31 05       	cpc	r19, r1
    1c70:	9c f4       	brge	.+38     	; 0x1c98 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	9c 81       	ldd	r25, Y+4	; 0x04
    1c76:	82 30       	cpi	r24, 0x02	; 2
    1c78:	91 05       	cpc	r25, r1
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <KEYPAD_4x4_adjustKeyNumber+0x52>
    1c7c:	48 c0       	rjmp	.+144    	; 0x1d0e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1c7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c80:	3c 81       	ldd	r19, Y+4	; 0x04
    1c82:	23 30       	cpi	r18, 0x03	; 3
    1c84:	31 05       	cpc	r19, r1
    1c86:	0c f0       	brlt	.+2      	; 0x1c8a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1c88:	45 c0       	rjmp	.+138    	; 0x1d14 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	81 30       	cpi	r24, 0x01	; 1
    1c90:	91 05       	cpc	r25, r1
    1c92:	09 f4       	brne	.+2      	; 0x1c96 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1c94:	39 c0       	rjmp	.+114    	; 0x1d08 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1c96:	67 c0       	rjmp	.+206    	; 0x1d66 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1c98:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9c:	26 30       	cpi	r18, 0x06	; 6
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1ca2:	41 c0       	rjmp	.+130    	; 0x1d26 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	87 30       	cpi	r24, 0x07	; 7
    1caa:	91 05       	cpc	r25, r1
    1cac:	0c f0       	brlt	.+2      	; 0x1cb0 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1cae:	3e c0       	rjmp	.+124    	; 0x1d2c <KEYPAD_4x4_adjustKeyNumber+0x100>
    1cb0:	37 c0       	rjmp	.+110    	; 0x1d20 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1cb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb6:	2c 30       	cpi	r18, 0x0C	; 12
    1cb8:	31 05       	cpc	r19, r1
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <KEYPAD_4x4_adjustKeyNumber+0x92>
    1cbc:	46 c0       	rjmp	.+140    	; 0x1d4a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	8d 30       	cpi	r24, 0x0D	; 13
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	5c f4       	brge	.+22     	; 0x1cde <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1cc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cca:	3c 81       	ldd	r19, Y+4	; 0x04
    1ccc:	2a 30       	cpi	r18, 0x0A	; 10
    1cce:	31 05       	cpc	r19, r1
    1cd0:	b1 f1       	breq	.+108    	; 0x1d3e <KEYPAD_4x4_adjustKeyNumber+0x112>
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	8b 30       	cpi	r24, 0x0B	; 11
    1cd8:	91 05       	cpc	r25, r1
    1cda:	a4 f5       	brge	.+104    	; 0x1d44 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1cdc:	2d c0       	rjmp	.+90     	; 0x1d38 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1cde:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce2:	2e 30       	cpi	r18, 0x0E	; 14
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	b9 f1       	breq	.+110    	; 0x1d56 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	8e 30       	cpi	r24, 0x0E	; 14
    1cee:	91 05       	cpc	r25, r1
    1cf0:	7c f1       	brlt	.+94     	; 0x1d50 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1cf2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf6:	2f 30       	cpi	r18, 0x0F	; 15
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	79 f1       	breq	.+94     	; 0x1d5a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	80 31       	cpi	r24, 0x10	; 16
    1d02:	91 05       	cpc	r25, r1
    1d04:	69 f1       	breq	.+90     	; 0x1d60 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1d06:	2f c0       	rjmp	.+94     	; 0x1d66 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1d08:	87 e0       	ldi	r24, 0x07	; 7
    1d0a:	89 83       	std	Y+1, r24	; 0x01
    1d0c:	2e c0       	rjmp	.+92     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1d0e:	88 e0       	ldi	r24, 0x08	; 8
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	2b c0       	rjmp	.+86     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1d14:	89 e0       	ldi	r24, 0x09	; 9
    1d16:	89 83       	std	Y+1, r24	; 0x01
    1d18:	28 c0       	rjmp	.+80     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1d1a:	85 e2       	ldi	r24, 0x25	; 37
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	25 c0       	rjmp	.+74     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1d20:	84 e0       	ldi	r24, 0x04	; 4
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	22 c0       	rjmp	.+68     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1d26:	85 e0       	ldi	r24, 0x05	; 5
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	1f c0       	rjmp	.+62     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1d2c:	86 e0       	ldi	r24, 0x06	; 6
    1d2e:	89 83       	std	Y+1, r24	; 0x01
    1d30:	1c c0       	rjmp	.+56     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1d32:	8a e2       	ldi	r24, 0x2A	; 42
    1d34:	89 83       	std	Y+1, r24	; 0x01
    1d36:	19 c0       	rjmp	.+50     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	16 c0       	rjmp	.+44     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
    1d40:	89 83       	std	Y+1, r24	; 0x01
    1d42:	13 c0       	rjmp	.+38     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1d44:	83 e0       	ldi	r24, 0x03	; 3
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	10 c0       	rjmp	.+32     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1d4a:	8d e2       	ldi	r24, 0x2D	; 45
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	0d c0       	rjmp	.+26     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1d50:	8d e0       	ldi	r24, 0x0D	; 13
    1d52:	89 83       	std	Y+1, r24	; 0x01
    1d54:	0a c0       	rjmp	.+20     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1d56:	19 82       	std	Y+1, r1	; 0x01
    1d58:	08 c0       	rjmp	.+16     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1d5a:	8d e3       	ldi	r24, 0x3D	; 61
    1d5c:	89 83       	std	Y+1, r24	; 0x01
    1d5e:	05 c0       	rjmp	.+10     	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1d60:	8b e2       	ldi	r24, 0x2B	; 43
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1d82:	82 e0       	ldi	r24, 0x02	; 2
    1d84:	62 e0       	ldi	r22, 0x02	; 2
    1d86:	41 e0       	ldi	r20, 0x01	; 1
    1d88:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	61 e0       	ldi	r22, 0x01	; 1
    1d90:	41 e0       	ldi	r20, 0x01	; 1
    1d92:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1d96:	82 e0       	ldi	r24, 0x02	; 2
    1d98:	60 e0       	ldi	r22, 0x00	; 0
    1d9a:	41 e0       	ldi	r20, 0x01	; 1
    1d9c:	0e 94 85 0a 	call	0x150a	; 0x150a <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	6f ef       	ldi	r22, 0xFF	; 255
    1da4:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1da8:	88 e3       	ldi	r24, 0x38	; 56
    1daa:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1dae:	8c e0       	ldi	r24, 0x0C	; 12
    1db0:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LCD_sendCommand>
}
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	cd b7       	in	r28, 0x3d	; 61
    1dc6:	de b7       	in	r29, 0x3e	; 62
    1dc8:	ea 97       	sbiw	r28, 0x3a	; 58
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	de bf       	out	0x3e, r29	; 62
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	cd bf       	out	0x3d, r28	; 61
    1dd4:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1dd6:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1dd8:	82 e0       	ldi	r24, 0x02	; 2
    1dda:	62 e0       	ldi	r22, 0x02	; 2
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	61 e0       	ldi	r22, 0x01	; 1
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	a0 e8       	ldi	r26, 0x80	; 128
    1df2:	bf e3       	ldi	r27, 0x3F	; 63
    1df4:	8d ab       	std	Y+53, r24	; 0x35
    1df6:	9e ab       	std	Y+54, r25	; 0x36
    1df8:	af ab       	std	Y+55, r26	; 0x37
    1dfa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfc:	6d a9       	ldd	r22, Y+53	; 0x35
    1dfe:	7e a9       	ldd	r23, Y+54	; 0x36
    1e00:	8f a9       	ldd	r24, Y+55	; 0x37
    1e02:	98 ad       	ldd	r25, Y+56	; 0x38
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	4a e7       	ldi	r20, 0x7A	; 122
    1e0a:	53 e4       	ldi	r21, 0x43	; 67
    1e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	89 ab       	std	Y+49, r24	; 0x31
    1e16:	9a ab       	std	Y+50, r25	; 0x32
    1e18:	ab ab       	std	Y+51, r26	; 0x33
    1e1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e1c:	69 a9       	ldd	r22, Y+49	; 0x31
    1e1e:	7a a9       	ldd	r23, Y+50	; 0x32
    1e20:	8b a9       	ldd	r24, Y+51	; 0x33
    1e22:	9c a9       	ldd	r25, Y+52	; 0x34
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e8       	ldi	r20, 0x80	; 128
    1e2a:	5f e3       	ldi	r21, 0x3F	; 63
    1e2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e30:	88 23       	and	r24, r24
    1e32:	2c f4       	brge	.+10     	; 0x1e3e <LCD_sendCommand+0x7e>
		__ticks = 1;
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	98 ab       	std	Y+48, r25	; 0x30
    1e3a:	8f a7       	std	Y+47, r24	; 0x2f
    1e3c:	3f c0       	rjmp	.+126    	; 0x1ebc <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1e3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e40:	7a a9       	ldd	r23, Y+50	; 0x32
    1e42:	8b a9       	ldd	r24, Y+51	; 0x33
    1e44:	9c a9       	ldd	r25, Y+52	; 0x34
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	3f ef       	ldi	r19, 0xFF	; 255
    1e4a:	4f e7       	ldi	r20, 0x7F	; 127
    1e4c:	57 e4       	ldi	r21, 0x47	; 71
    1e4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e52:	18 16       	cp	r1, r24
    1e54:	4c f5       	brge	.+82     	; 0x1ea8 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e56:	6d a9       	ldd	r22, Y+53	; 0x35
    1e58:	7e a9       	ldd	r23, Y+54	; 0x36
    1e5a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e5c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e2       	ldi	r20, 0x20	; 32
    1e64:	51 e4       	ldi	r21, 0x41	; 65
    1e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	98 ab       	std	Y+48, r25	; 0x30
    1e7c:	8f a7       	std	Y+47, r24	; 0x2f
    1e7e:	0f c0       	rjmp	.+30     	; 0x1e9e <LCD_sendCommand+0xde>
    1e80:	89 e1       	ldi	r24, 0x19	; 25
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	9e a7       	std	Y+46, r25	; 0x2e
    1e86:	8d a7       	std	Y+45, r24	; 0x2d
    1e88:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <LCD_sendCommand+0xcc>
    1e90:	9e a7       	std	Y+46, r25	; 0x2e
    1e92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e96:	98 a9       	ldd	r25, Y+48	; 0x30
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	98 ab       	std	Y+48, r25	; 0x30
    1e9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	69 f7       	brne	.-38     	; 0x1e80 <LCD_sendCommand+0xc0>
    1ea6:	14 c0       	rjmp	.+40     	; 0x1ed0 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eaa:	7a a9       	ldd	r23, Y+50	; 0x32
    1eac:	8b a9       	ldd	r24, Y+51	; 0x33
    1eae:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	98 ab       	std	Y+48, r25	; 0x30
    1eba:	8f a7       	std	Y+47, r24	; 0x2f
    1ebc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ebe:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec0:	9c a7       	std	Y+44, r25	; 0x2c
    1ec2:	8b a7       	std	Y+43, r24	; 0x2b
    1ec4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	f1 f7       	brne	.-4      	; 0x1ec8 <LCD_sendCommand+0x108>
    1ecc:	9c a7       	std	Y+44, r25	; 0x2c
    1ece:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	41 e0       	ldi	r20, 0x01	; 1
    1ed6:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	a0 e8       	ldi	r26, 0x80	; 128
    1ee0:	bf e3       	ldi	r27, 0x3F	; 63
    1ee2:	8f a3       	std	Y+39, r24	; 0x27
    1ee4:	98 a7       	std	Y+40, r25	; 0x28
    1ee6:	a9 a7       	std	Y+41, r26	; 0x29
    1ee8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eea:	6f a1       	ldd	r22, Y+39	; 0x27
    1eec:	78 a5       	ldd	r23, Y+40	; 0x28
    1eee:	89 a5       	ldd	r24, Y+41	; 0x29
    1ef0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	4a e7       	ldi	r20, 0x7A	; 122
    1ef8:	53 e4       	ldi	r21, 0x43	; 67
    1efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	8b a3       	std	Y+35, r24	; 0x23
    1f04:	9c a3       	std	Y+36, r25	; 0x24
    1f06:	ad a3       	std	Y+37, r26	; 0x25
    1f08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f10:	9e a1       	ldd	r25, Y+38	; 0x26
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e8       	ldi	r20, 0x80	; 128
    1f18:	5f e3       	ldi	r21, 0x3F	; 63
    1f1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f1e:	88 23       	and	r24, r24
    1f20:	2c f4       	brge	.+10     	; 0x1f2c <LCD_sendCommand+0x16c>
		__ticks = 1;
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	9a a3       	std	Y+34, r25	; 0x22
    1f28:	89 a3       	std	Y+33, r24	; 0x21
    1f2a:	3f c0       	rjmp	.+126    	; 0x1faa <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1f2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1f30:	8d a1       	ldd	r24, Y+37	; 0x25
    1f32:	9e a1       	ldd	r25, Y+38	; 0x26
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	3f ef       	ldi	r19, 0xFF	; 255
    1f38:	4f e7       	ldi	r20, 0x7F	; 127
    1f3a:	57 e4       	ldi	r21, 0x47	; 71
    1f3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f40:	18 16       	cp	r1, r24
    1f42:	4c f5       	brge	.+82     	; 0x1f96 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f44:	6f a1       	ldd	r22, Y+39	; 0x27
    1f46:	78 a5       	ldd	r23, Y+40	; 0x28
    1f48:	89 a5       	ldd	r24, Y+41	; 0x29
    1f4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e2       	ldi	r20, 0x20	; 32
    1f52:	51 e4       	ldi	r21, 0x41	; 65
    1f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	cd 01       	movw	r24, r26
    1f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	9a a3       	std	Y+34, r25	; 0x22
    1f6a:	89 a3       	std	Y+33, r24	; 0x21
    1f6c:	0f c0       	rjmp	.+30     	; 0x1f8c <LCD_sendCommand+0x1cc>
    1f6e:	89 e1       	ldi	r24, 0x19	; 25
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	98 a3       	std	Y+32, r25	; 0x20
    1f74:	8f 8f       	std	Y+31, r24	; 0x1f
    1f76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f78:	98 a1       	ldd	r25, Y+32	; 0x20
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <LCD_sendCommand+0x1ba>
    1f7e:	98 a3       	std	Y+32, r25	; 0x20
    1f80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f82:	89 a1       	ldd	r24, Y+33	; 0x21
    1f84:	9a a1       	ldd	r25, Y+34	; 0x22
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	9a a3       	std	Y+34, r25	; 0x22
    1f8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	69 f7       	brne	.-38     	; 0x1f6e <LCD_sendCommand+0x1ae>
    1f94:	14 c0       	rjmp	.+40     	; 0x1fbe <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f96:	6b a1       	ldd	r22, Y+35	; 0x23
    1f98:	7c a1       	ldd	r23, Y+36	; 0x24
    1f9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	9a a3       	std	Y+34, r25	; 0x22
    1fa8:	89 a3       	std	Y+33, r24	; 0x21
    1faa:	89 a1       	ldd	r24, Y+33	; 0x21
    1fac:	9a a1       	ldd	r25, Y+34	; 0x22
    1fae:	9e 8f       	std	Y+30, r25	; 0x1e
    1fb0:	8d 8f       	std	Y+29, r24	; 0x1d
    1fb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	f1 f7       	brne	.-4      	; 0x1fb6 <LCD_sendCommand+0x1f6>
    1fba:	9e 8f       	std	Y+30, r25	; 0x1e
    1fbc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	6a ad       	ldd	r22, Y+58	; 0x3a
    1fc2:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <GPIO_writePort>
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	a0 e8       	ldi	r26, 0x80	; 128
    1fcc:	bf e3       	ldi	r27, 0x3F	; 63
    1fce:	89 8f       	std	Y+25, r24	; 0x19
    1fd0:	9a 8f       	std	Y+26, r25	; 0x1a
    1fd2:	ab 8f       	std	Y+27, r26	; 0x1b
    1fd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	4a e7       	ldi	r20, 0x7A	; 122
    1fe4:	53 e4       	ldi	r21, 0x43	; 67
    1fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	8d 8b       	std	Y+21, r24	; 0x15
    1ff0:	9e 8b       	std	Y+22, r25	; 0x16
    1ff2:	af 8b       	std	Y+23, r26	; 0x17
    1ff4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e8       	ldi	r20, 0x80	; 128
    2004:	5f e3       	ldi	r21, 0x3F	; 63
    2006:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    200a:	88 23       	and	r24, r24
    200c:	2c f4       	brge	.+10     	; 0x2018 <LCD_sendCommand+0x258>
		__ticks = 1;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	9c 8b       	std	Y+20, r25	; 0x14
    2014:	8b 8b       	std	Y+19, r24	; 0x13
    2016:	3f c0       	rjmp	.+126    	; 0x2096 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2018:	6d 89       	ldd	r22, Y+21	; 0x15
    201a:	7e 89       	ldd	r23, Y+22	; 0x16
    201c:	8f 89       	ldd	r24, Y+23	; 0x17
    201e:	98 8d       	ldd	r25, Y+24	; 0x18
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	3f ef       	ldi	r19, 0xFF	; 255
    2024:	4f e7       	ldi	r20, 0x7F	; 127
    2026:	57 e4       	ldi	r21, 0x47	; 71
    2028:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    202c:	18 16       	cp	r1, r24
    202e:	4c f5       	brge	.+82     	; 0x2082 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2030:	69 8d       	ldd	r22, Y+25	; 0x19
    2032:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2034:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2036:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e2       	ldi	r20, 0x20	; 32
    203e:	51 e4       	ldi	r21, 0x41	; 65
    2040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	bc 01       	movw	r22, r24
    204a:	cd 01       	movw	r24, r26
    204c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	9c 8b       	std	Y+20, r25	; 0x14
    2056:	8b 8b       	std	Y+19, r24	; 0x13
    2058:	0f c0       	rjmp	.+30     	; 0x2078 <LCD_sendCommand+0x2b8>
    205a:	89 e1       	ldi	r24, 0x19	; 25
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	9a 8b       	std	Y+18, r25	; 0x12
    2060:	89 8b       	std	Y+17, r24	; 0x11
    2062:	89 89       	ldd	r24, Y+17	; 0x11
    2064:	9a 89       	ldd	r25, Y+18	; 0x12
    2066:	01 97       	sbiw	r24, 0x01	; 1
    2068:	f1 f7       	brne	.-4      	; 0x2066 <LCD_sendCommand+0x2a6>
    206a:	9a 8b       	std	Y+18, r25	; 0x12
    206c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206e:	8b 89       	ldd	r24, Y+19	; 0x13
    2070:	9c 89       	ldd	r25, Y+20	; 0x14
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	9c 8b       	std	Y+20, r25	; 0x14
    2076:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2078:	8b 89       	ldd	r24, Y+19	; 0x13
    207a:	9c 89       	ldd	r25, Y+20	; 0x14
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	69 f7       	brne	.-38     	; 0x205a <LCD_sendCommand+0x29a>
    2080:	14 c0       	rjmp	.+40     	; 0x20aa <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2082:	6d 89       	ldd	r22, Y+21	; 0x15
    2084:	7e 89       	ldd	r23, Y+22	; 0x16
    2086:	8f 89       	ldd	r24, Y+23	; 0x17
    2088:	98 8d       	ldd	r25, Y+24	; 0x18
    208a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9c 8b       	std	Y+20, r25	; 0x14
    2094:	8b 8b       	std	Y+19, r24	; 0x13
    2096:	8b 89       	ldd	r24, Y+19	; 0x13
    2098:	9c 89       	ldd	r25, Y+20	; 0x14
    209a:	98 8b       	std	Y+16, r25	; 0x10
    209c:	8f 87       	std	Y+15, r24	; 0x0f
    209e:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a0:	98 89       	ldd	r25, Y+16	; 0x10
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	f1 f7       	brne	.-4      	; 0x20a2 <LCD_sendCommand+0x2e2>
    20a6:	98 8b       	std	Y+16, r25	; 0x10
    20a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    20aa:	82 e0       	ldi	r24, 0x02	; 2
    20ac:	60 e0       	ldi	r22, 0x00	; 0
    20ae:	40 e0       	ldi	r20, 0x00	; 0
    20b0:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	a0 e8       	ldi	r26, 0x80	; 128
    20ba:	bf e3       	ldi	r27, 0x3F	; 63
    20bc:	8b 87       	std	Y+11, r24	; 0x0b
    20be:	9c 87       	std	Y+12, r25	; 0x0c
    20c0:	ad 87       	std	Y+13, r26	; 0x0d
    20c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	4a e7       	ldi	r20, 0x7A	; 122
    20d2:	53 e4       	ldi	r21, 0x43	; 67
    20d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	8f 83       	std	Y+7, r24	; 0x07
    20de:	98 87       	std	Y+8, r25	; 0x08
    20e0:	a9 87       	std	Y+9, r26	; 0x09
    20e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e4:	6f 81       	ldd	r22, Y+7	; 0x07
    20e6:	78 85       	ldd	r23, Y+8	; 0x08
    20e8:	89 85       	ldd	r24, Y+9	; 0x09
    20ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e8       	ldi	r20, 0x80	; 128
    20f2:	5f e3       	ldi	r21, 0x3F	; 63
    20f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20f8:	88 23       	and	r24, r24
    20fa:	2c f4       	brge	.+10     	; 0x2106 <LCD_sendCommand+0x346>
		__ticks = 1;
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
    2104:	3f c0       	rjmp	.+126    	; 0x2184 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    2106:	6f 81       	ldd	r22, Y+7	; 0x07
    2108:	78 85       	ldd	r23, Y+8	; 0x08
    210a:	89 85       	ldd	r24, Y+9	; 0x09
    210c:	9a 85       	ldd	r25, Y+10	; 0x0a
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	3f ef       	ldi	r19, 0xFF	; 255
    2112:	4f e7       	ldi	r20, 0x7F	; 127
    2114:	57 e4       	ldi	r21, 0x47	; 71
    2116:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    211a:	18 16       	cp	r1, r24
    211c:	4c f5       	brge	.+82     	; 0x2170 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2120:	7c 85       	ldd	r23, Y+12	; 0x0c
    2122:	8d 85       	ldd	r24, Y+13	; 0x0d
    2124:	9e 85       	ldd	r25, Y+14	; 0x0e
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e2       	ldi	r20, 0x20	; 32
    212c:	51 e4       	ldi	r21, 0x41	; 65
    212e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	bc 01       	movw	r22, r24
    2138:	cd 01       	movw	r24, r26
    213a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	9e 83       	std	Y+6, r25	; 0x06
    2144:	8d 83       	std	Y+5, r24	; 0x05
    2146:	0f c0       	rjmp	.+30     	; 0x2166 <LCD_sendCommand+0x3a6>
    2148:	89 e1       	ldi	r24, 0x19	; 25
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	9c 83       	std	Y+4, r25	; 0x04
    214e:	8b 83       	std	Y+3, r24	; 0x03
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	f1 f7       	brne	.-4      	; 0x2154 <LCD_sendCommand+0x394>
    2158:	9c 83       	std	Y+4, r25	; 0x04
    215a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215c:	8d 81       	ldd	r24, Y+5	; 0x05
    215e:	9e 81       	ldd	r25, Y+6	; 0x06
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	9e 83       	std	Y+6, r25	; 0x06
    2164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	69 f7       	brne	.-38     	; 0x2148 <LCD_sendCommand+0x388>
    216e:	14 c0       	rjmp	.+40     	; 0x2198 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2170:	6f 81       	ldd	r22, Y+7	; 0x07
    2172:	78 85       	ldd	r23, Y+8	; 0x08
    2174:	89 85       	ldd	r24, Y+9	; 0x09
    2176:	9a 85       	ldd	r25, Y+10	; 0x0a
    2178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	9e 83       	std	Y+6, r25	; 0x06
    2182:	8d 83       	std	Y+5, r24	; 0x05
    2184:	8d 81       	ldd	r24, Y+5	; 0x05
    2186:	9e 81       	ldd	r25, Y+6	; 0x06
    2188:	9a 83       	std	Y+2, r25	; 0x02
    218a:	89 83       	std	Y+1, r24	; 0x01
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	9a 81       	ldd	r25, Y+2	; 0x02
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	f1 f7       	brne	.-4      	; 0x2190 <LCD_sendCommand+0x3d0>
    2194:	9a 83       	std	Y+2, r25	; 0x02
    2196:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2198:	ea 96       	adiw	r28, 0x3a	; 58
    219a:	0f b6       	in	r0, 0x3f	; 63
    219c:	f8 94       	cli
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	0f be       	out	0x3f, r0	; 63
    21a2:	cd bf       	out	0x3d, r28	; 61
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	ea 97       	sbiw	r28, 0x3a	; 58
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
    21be:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    21c0:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    21c2:	82 e0       	ldi	r24, 0x02	; 2
    21c4:	62 e0       	ldi	r22, 0x02	; 2
    21c6:	41 e0       	ldi	r20, 0x01	; 1
    21c8:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    21cc:	82 e0       	ldi	r24, 0x02	; 2
    21ce:	61 e0       	ldi	r22, 0x01	; 1
    21d0:	40 e0       	ldi	r20, 0x00	; 0
    21d2:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	a0 e8       	ldi	r26, 0x80	; 128
    21dc:	bf e3       	ldi	r27, 0x3F	; 63
    21de:	8d ab       	std	Y+53, r24	; 0x35
    21e0:	9e ab       	std	Y+54, r25	; 0x36
    21e2:	af ab       	std	Y+55, r26	; 0x37
    21e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21e6:	6d a9       	ldd	r22, Y+53	; 0x35
    21e8:	7e a9       	ldd	r23, Y+54	; 0x36
    21ea:	8f a9       	ldd	r24, Y+55	; 0x37
    21ec:	98 ad       	ldd	r25, Y+56	; 0x38
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	4a e7       	ldi	r20, 0x7A	; 122
    21f4:	53 e4       	ldi	r21, 0x43	; 67
    21f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	89 ab       	std	Y+49, r24	; 0x31
    2200:	9a ab       	std	Y+50, r25	; 0x32
    2202:	ab ab       	std	Y+51, r26	; 0x33
    2204:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2206:	69 a9       	ldd	r22, Y+49	; 0x31
    2208:	7a a9       	ldd	r23, Y+50	; 0x32
    220a:	8b a9       	ldd	r24, Y+51	; 0x33
    220c:	9c a9       	ldd	r25, Y+52	; 0x34
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e8       	ldi	r20, 0x80	; 128
    2214:	5f e3       	ldi	r21, 0x3F	; 63
    2216:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    221a:	88 23       	and	r24, r24
    221c:	2c f4       	brge	.+10     	; 0x2228 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	98 ab       	std	Y+48, r25	; 0x30
    2224:	8f a7       	std	Y+47, r24	; 0x2f
    2226:	3f c0       	rjmp	.+126    	; 0x22a6 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    2228:	69 a9       	ldd	r22, Y+49	; 0x31
    222a:	7a a9       	ldd	r23, Y+50	; 0x32
    222c:	8b a9       	ldd	r24, Y+51	; 0x33
    222e:	9c a9       	ldd	r25, Y+52	; 0x34
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	3f ef       	ldi	r19, 0xFF	; 255
    2234:	4f e7       	ldi	r20, 0x7F	; 127
    2236:	57 e4       	ldi	r21, 0x47	; 71
    2238:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    223c:	18 16       	cp	r1, r24
    223e:	4c f5       	brge	.+82     	; 0x2292 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2240:	6d a9       	ldd	r22, Y+53	; 0x35
    2242:	7e a9       	ldd	r23, Y+54	; 0x36
    2244:	8f a9       	ldd	r24, Y+55	; 0x37
    2246:	98 ad       	ldd	r25, Y+56	; 0x38
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e2       	ldi	r20, 0x20	; 32
    224e:	51 e4       	ldi	r21, 0x41	; 65
    2250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	bc 01       	movw	r22, r24
    225a:	cd 01       	movw	r24, r26
    225c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	98 ab       	std	Y+48, r25	; 0x30
    2266:	8f a7       	std	Y+47, r24	; 0x2f
    2268:	0f c0       	rjmp	.+30     	; 0x2288 <LCD_displayCharacter+0xde>
    226a:	89 e1       	ldi	r24, 0x19	; 25
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	9e a7       	std	Y+46, r25	; 0x2e
    2270:	8d a7       	std	Y+45, r24	; 0x2d
    2272:	8d a5       	ldd	r24, Y+45	; 0x2d
    2274:	9e a5       	ldd	r25, Y+46	; 0x2e
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <LCD_displayCharacter+0xcc>
    227a:	9e a7       	std	Y+46, r25	; 0x2e
    227c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    227e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2280:	98 a9       	ldd	r25, Y+48	; 0x30
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	98 ab       	std	Y+48, r25	; 0x30
    2286:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2288:	8f a5       	ldd	r24, Y+47	; 0x2f
    228a:	98 a9       	ldd	r25, Y+48	; 0x30
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	69 f7       	brne	.-38     	; 0x226a <LCD_displayCharacter+0xc0>
    2290:	14 c0       	rjmp	.+40     	; 0x22ba <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2292:	69 a9       	ldd	r22, Y+49	; 0x31
    2294:	7a a9       	ldd	r23, Y+50	; 0x32
    2296:	8b a9       	ldd	r24, Y+51	; 0x33
    2298:	9c a9       	ldd	r25, Y+52	; 0x34
    229a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	98 ab       	std	Y+48, r25	; 0x30
    22a4:	8f a7       	std	Y+47, r24	; 0x2f
    22a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22a8:	98 a9       	ldd	r25, Y+48	; 0x30
    22aa:	9c a7       	std	Y+44, r25	; 0x2c
    22ac:	8b a7       	std	Y+43, r24	; 0x2b
    22ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    22b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <LCD_displayCharacter+0x108>
    22b6:	9c a7       	std	Y+44, r25	; 0x2c
    22b8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22ba:	82 e0       	ldi	r24, 0x02	; 2
    22bc:	60 e0       	ldi	r22, 0x00	; 0
    22be:	41 e0       	ldi	r20, 0x01	; 1
    22c0:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	a0 e8       	ldi	r26, 0x80	; 128
    22ca:	bf e3       	ldi	r27, 0x3F	; 63
    22cc:	8f a3       	std	Y+39, r24	; 0x27
    22ce:	98 a7       	std	Y+40, r25	; 0x28
    22d0:	a9 a7       	std	Y+41, r26	; 0x29
    22d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d4:	6f a1       	ldd	r22, Y+39	; 0x27
    22d6:	78 a5       	ldd	r23, Y+40	; 0x28
    22d8:	89 a5       	ldd	r24, Y+41	; 0x29
    22da:	9a a5       	ldd	r25, Y+42	; 0x2a
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	4a e7       	ldi	r20, 0x7A	; 122
    22e2:	53 e4       	ldi	r21, 0x43	; 67
    22e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	8b a3       	std	Y+35, r24	; 0x23
    22ee:	9c a3       	std	Y+36, r25	; 0x24
    22f0:	ad a3       	std	Y+37, r26	; 0x25
    22f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22f4:	6b a1       	ldd	r22, Y+35	; 0x23
    22f6:	7c a1       	ldd	r23, Y+36	; 0x24
    22f8:	8d a1       	ldd	r24, Y+37	; 0x25
    22fa:	9e a1       	ldd	r25, Y+38	; 0x26
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e8       	ldi	r20, 0x80	; 128
    2302:	5f e3       	ldi	r21, 0x3F	; 63
    2304:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2308:	88 23       	and	r24, r24
    230a:	2c f4       	brge	.+10     	; 0x2316 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	9a a3       	std	Y+34, r25	; 0x22
    2312:	89 a3       	std	Y+33, r24	; 0x21
    2314:	3f c0       	rjmp	.+126    	; 0x2394 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    2316:	6b a1       	ldd	r22, Y+35	; 0x23
    2318:	7c a1       	ldd	r23, Y+36	; 0x24
    231a:	8d a1       	ldd	r24, Y+37	; 0x25
    231c:	9e a1       	ldd	r25, Y+38	; 0x26
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	3f ef       	ldi	r19, 0xFF	; 255
    2322:	4f e7       	ldi	r20, 0x7F	; 127
    2324:	57 e4       	ldi	r21, 0x47	; 71
    2326:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    232a:	18 16       	cp	r1, r24
    232c:	4c f5       	brge	.+82     	; 0x2380 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232e:	6f a1       	ldd	r22, Y+39	; 0x27
    2330:	78 a5       	ldd	r23, Y+40	; 0x28
    2332:	89 a5       	ldd	r24, Y+41	; 0x29
    2334:	9a a5       	ldd	r25, Y+42	; 0x2a
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e2       	ldi	r20, 0x20	; 32
    233c:	51 e4       	ldi	r21, 0x41	; 65
    233e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	bc 01       	movw	r22, r24
    2348:	cd 01       	movw	r24, r26
    234a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	9a a3       	std	Y+34, r25	; 0x22
    2354:	89 a3       	std	Y+33, r24	; 0x21
    2356:	0f c0       	rjmp	.+30     	; 0x2376 <LCD_displayCharacter+0x1cc>
    2358:	89 e1       	ldi	r24, 0x19	; 25
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	98 a3       	std	Y+32, r25	; 0x20
    235e:	8f 8f       	std	Y+31, r24	; 0x1f
    2360:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2362:	98 a1       	ldd	r25, Y+32	; 0x20
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <LCD_displayCharacter+0x1ba>
    2368:	98 a3       	std	Y+32, r25	; 0x20
    236a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236c:	89 a1       	ldd	r24, Y+33	; 0x21
    236e:	9a a1       	ldd	r25, Y+34	; 0x22
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	9a a3       	std	Y+34, r25	; 0x22
    2374:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2376:	89 a1       	ldd	r24, Y+33	; 0x21
    2378:	9a a1       	ldd	r25, Y+34	; 0x22
    237a:	00 97       	sbiw	r24, 0x00	; 0
    237c:	69 f7       	brne	.-38     	; 0x2358 <LCD_displayCharacter+0x1ae>
    237e:	14 c0       	rjmp	.+40     	; 0x23a8 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2380:	6b a1       	ldd	r22, Y+35	; 0x23
    2382:	7c a1       	ldd	r23, Y+36	; 0x24
    2384:	8d a1       	ldd	r24, Y+37	; 0x25
    2386:	9e a1       	ldd	r25, Y+38	; 0x26
    2388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	9a a3       	std	Y+34, r25	; 0x22
    2392:	89 a3       	std	Y+33, r24	; 0x21
    2394:	89 a1       	ldd	r24, Y+33	; 0x21
    2396:	9a a1       	ldd	r25, Y+34	; 0x22
    2398:	9e 8f       	std	Y+30, r25	; 0x1e
    239a:	8d 8f       	std	Y+29, r24	; 0x1d
    239c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    239e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <LCD_displayCharacter+0x1f6>
    23a4:	9e 8f       	std	Y+30, r25	; 0x1e
    23a6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	6a ad       	ldd	r22, Y+58	; 0x3a
    23ac:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <GPIO_writePort>
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	a0 e8       	ldi	r26, 0x80	; 128
    23b6:	bf e3       	ldi	r27, 0x3F	; 63
    23b8:	89 8f       	std	Y+25, r24	; 0x19
    23ba:	9a 8f       	std	Y+26, r25	; 0x1a
    23bc:	ab 8f       	std	Y+27, r26	; 0x1b
    23be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c0:	69 8d       	ldd	r22, Y+25	; 0x19
    23c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	4a e7       	ldi	r20, 0x7A	; 122
    23ce:	53 e4       	ldi	r21, 0x43	; 67
    23d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	8d 8b       	std	Y+21, r24	; 0x15
    23da:	9e 8b       	std	Y+22, r25	; 0x16
    23dc:	af 8b       	std	Y+23, r26	; 0x17
    23de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23e0:	6d 89       	ldd	r22, Y+21	; 0x15
    23e2:	7e 89       	ldd	r23, Y+22	; 0x16
    23e4:	8f 89       	ldd	r24, Y+23	; 0x17
    23e6:	98 8d       	ldd	r25, Y+24	; 0x18
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	40 e8       	ldi	r20, 0x80	; 128
    23ee:	5f e3       	ldi	r21, 0x3F	; 63
    23f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23f4:	88 23       	and	r24, r24
    23f6:	2c f4       	brge	.+10     	; 0x2402 <LCD_displayCharacter+0x258>
		__ticks = 1;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9c 8b       	std	Y+20, r25	; 0x14
    23fe:	8b 8b       	std	Y+19, r24	; 0x13
    2400:	3f c0       	rjmp	.+126    	; 0x2480 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2402:	6d 89       	ldd	r22, Y+21	; 0x15
    2404:	7e 89       	ldd	r23, Y+22	; 0x16
    2406:	8f 89       	ldd	r24, Y+23	; 0x17
    2408:	98 8d       	ldd	r25, Y+24	; 0x18
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	3f ef       	ldi	r19, 0xFF	; 255
    240e:	4f e7       	ldi	r20, 0x7F	; 127
    2410:	57 e4       	ldi	r21, 0x47	; 71
    2412:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2416:	18 16       	cp	r1, r24
    2418:	4c f5       	brge	.+82     	; 0x246c <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241a:	69 8d       	ldd	r22, Y+25	; 0x19
    241c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    241e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2420:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e2       	ldi	r20, 0x20	; 32
    2428:	51 e4       	ldi	r21, 0x41	; 65
    242a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	bc 01       	movw	r22, r24
    2434:	cd 01       	movw	r24, r26
    2436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	9c 8b       	std	Y+20, r25	; 0x14
    2440:	8b 8b       	std	Y+19, r24	; 0x13
    2442:	0f c0       	rjmp	.+30     	; 0x2462 <LCD_displayCharacter+0x2b8>
    2444:	89 e1       	ldi	r24, 0x19	; 25
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	9a 8b       	std	Y+18, r25	; 0x12
    244a:	89 8b       	std	Y+17, r24	; 0x11
    244c:	89 89       	ldd	r24, Y+17	; 0x11
    244e:	9a 89       	ldd	r25, Y+18	; 0x12
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <LCD_displayCharacter+0x2a6>
    2454:	9a 8b       	std	Y+18, r25	; 0x12
    2456:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2458:	8b 89       	ldd	r24, Y+19	; 0x13
    245a:	9c 89       	ldd	r25, Y+20	; 0x14
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	9c 8b       	std	Y+20, r25	; 0x14
    2460:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2462:	8b 89       	ldd	r24, Y+19	; 0x13
    2464:	9c 89       	ldd	r25, Y+20	; 0x14
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	69 f7       	brne	.-38     	; 0x2444 <LCD_displayCharacter+0x29a>
    246a:	14 c0       	rjmp	.+40     	; 0x2494 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246c:	6d 89       	ldd	r22, Y+21	; 0x15
    246e:	7e 89       	ldd	r23, Y+22	; 0x16
    2470:	8f 89       	ldd	r24, Y+23	; 0x17
    2472:	98 8d       	ldd	r25, Y+24	; 0x18
    2474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	9c 8b       	std	Y+20, r25	; 0x14
    247e:	8b 8b       	std	Y+19, r24	; 0x13
    2480:	8b 89       	ldd	r24, Y+19	; 0x13
    2482:	9c 89       	ldd	r25, Y+20	; 0x14
    2484:	98 8b       	std	Y+16, r25	; 0x10
    2486:	8f 87       	std	Y+15, r24	; 0x0f
    2488:	8f 85       	ldd	r24, Y+15	; 0x0f
    248a:	98 89       	ldd	r25, Y+16	; 0x10
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	f1 f7       	brne	.-4      	; 0x248c <LCD_displayCharacter+0x2e2>
    2490:	98 8b       	std	Y+16, r25	; 0x10
    2492:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2494:	82 e0       	ldi	r24, 0x02	; 2
    2496:	60 e0       	ldi	r22, 0x00	; 0
    2498:	40 e0       	ldi	r20, 0x00	; 0
    249a:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_writePin>
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	a0 e8       	ldi	r26, 0x80	; 128
    24a4:	bf e3       	ldi	r27, 0x3F	; 63
    24a6:	8b 87       	std	Y+11, r24	; 0x0b
    24a8:	9c 87       	std	Y+12, r25	; 0x0c
    24aa:	ad 87       	std	Y+13, r26	; 0x0d
    24ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	4a e7       	ldi	r20, 0x7A	; 122
    24bc:	53 e4       	ldi	r21, 0x43	; 67
    24be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	8f 83       	std	Y+7, r24	; 0x07
    24c8:	98 87       	std	Y+8, r25	; 0x08
    24ca:	a9 87       	std	Y+9, r26	; 0x09
    24cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ce:	6f 81       	ldd	r22, Y+7	; 0x07
    24d0:	78 85       	ldd	r23, Y+8	; 0x08
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e8       	ldi	r20, 0x80	; 128
    24dc:	5f e3       	ldi	r21, 0x3F	; 63
    24de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24e2:	88 23       	and	r24, r24
    24e4:	2c f4       	brge	.+10     	; 0x24f0 <LCD_displayCharacter+0x346>
		__ticks = 1;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	9e 83       	std	Y+6, r25	; 0x06
    24ec:	8d 83       	std	Y+5, r24	; 0x05
    24ee:	3f c0       	rjmp	.+126    	; 0x256e <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    24f0:	6f 81       	ldd	r22, Y+7	; 0x07
    24f2:	78 85       	ldd	r23, Y+8	; 0x08
    24f4:	89 85       	ldd	r24, Y+9	; 0x09
    24f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	3f ef       	ldi	r19, 0xFF	; 255
    24fc:	4f e7       	ldi	r20, 0x7F	; 127
    24fe:	57 e4       	ldi	r21, 0x47	; 71
    2500:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2504:	18 16       	cp	r1, r24
    2506:	4c f5       	brge	.+82     	; 0x255a <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2508:	6b 85       	ldd	r22, Y+11	; 0x0b
    250a:	7c 85       	ldd	r23, Y+12	; 0x0c
    250c:	8d 85       	ldd	r24, Y+13	; 0x0d
    250e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e2       	ldi	r20, 0x20	; 32
    2516:	51 e4       	ldi	r21, 0x41	; 65
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
    2530:	0f c0       	rjmp	.+30     	; 0x2550 <LCD_displayCharacter+0x3a6>
    2532:	89 e1       	ldi	r24, 0x19	; 25
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9c 83       	std	Y+4, r25	; 0x04
    2538:	8b 83       	std	Y+3, r24	; 0x03
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	9c 81       	ldd	r25, Y+4	; 0x04
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <LCD_displayCharacter+0x394>
    2542:	9c 83       	std	Y+4, r25	; 0x04
    2544:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2546:	8d 81       	ldd	r24, Y+5	; 0x05
    2548:	9e 81       	ldd	r25, Y+6	; 0x06
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	9e 83       	std	Y+6, r25	; 0x06
    254e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	69 f7       	brne	.-38     	; 0x2532 <LCD_displayCharacter+0x388>
    2558:	14 c0       	rjmp	.+40     	; 0x2582 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255a:	6f 81       	ldd	r22, Y+7	; 0x07
    255c:	78 85       	ldd	r23, Y+8	; 0x08
    255e:	89 85       	ldd	r24, Y+9	; 0x09
    2560:	9a 85       	ldd	r25, Y+10	; 0x0a
    2562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	9e 83       	std	Y+6, r25	; 0x06
    256c:	8d 83       	std	Y+5, r24	; 0x05
    256e:	8d 81       	ldd	r24, Y+5	; 0x05
    2570:	9e 81       	ldd	r25, Y+6	; 0x06
    2572:	9a 83       	std	Y+2, r25	; 0x02
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	9a 81       	ldd	r25, Y+2	; 0x02
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <LCD_displayCharacter+0x3d0>
    257e:	9a 83       	std	Y+2, r25	; 0x02
    2580:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2582:	ea 96       	adiw	r28, 0x3a	; 58
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	f8 94       	cli
    2588:	de bf       	out	0x3e, r29	; 62
    258a:	0f be       	out	0x3f, r0	; 63
    258c:	cd bf       	out	0x3d, r28	; 61
    258e:	cf 91       	pop	r28
    2590:	df 91       	pop	r29
    2592:	08 95       	ret

00002594 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2594:	df 93       	push	r29
    2596:	cf 93       	push	r28
    2598:	00 d0       	rcall	.+0      	; 0x259a <LCD_displayString+0x6>
    259a:	0f 92       	push	r0
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
    25a0:	9b 83       	std	Y+3, r25	; 0x03
    25a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25a4:	19 82       	std	Y+1, r1	; 0x01
    25a6:	0e c0       	rjmp	.+28     	; 0x25c4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	28 2f       	mov	r18, r24
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	9b 81       	ldd	r25, Y+3	; 0x03
    25b2:	fc 01       	movw	r30, r24
    25b4:	e2 0f       	add	r30, r18
    25b6:	f3 1f       	adc	r31, r19
    25b8:	80 81       	ld	r24, Z
    25ba:	0e 94 d5 10 	call	0x21aa	; 0x21aa <LCD_displayCharacter>
		i++;
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	8f 5f       	subi	r24, 0xFF	; 255
    25c2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	28 2f       	mov	r18, r24
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	9b 81       	ldd	r25, Y+3	; 0x03
    25ce:	fc 01       	movw	r30, r24
    25d0:	e2 0f       	add	r30, r18
    25d2:	f3 1f       	adc	r31, r19
    25d4:	80 81       	ld	r24, Z
    25d6:	88 23       	and	r24, r24
    25d8:	39 f7       	brne	.-50     	; 0x25a8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	08 95       	ret

000025e6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	00 d0       	rcall	.+0      	; 0x25ec <LCD_moveCursor+0x6>
    25ec:	00 d0       	rcall	.+0      	; 0x25ee <LCD_moveCursor+0x8>
    25ee:	0f 92       	push	r0
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	8a 83       	std	Y+2, r24	; 0x02
    25f6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	28 2f       	mov	r18, r24
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	3d 83       	std	Y+5, r19	; 0x05
    2600:	2c 83       	std	Y+4, r18	; 0x04
    2602:	8c 81       	ldd	r24, Y+4	; 0x04
    2604:	9d 81       	ldd	r25, Y+5	; 0x05
    2606:	81 30       	cpi	r24, 0x01	; 1
    2608:	91 05       	cpc	r25, r1
    260a:	c1 f0       	breq	.+48     	; 0x263c <LCD_moveCursor+0x56>
    260c:	2c 81       	ldd	r18, Y+4	; 0x04
    260e:	3d 81       	ldd	r19, Y+5	; 0x05
    2610:	22 30       	cpi	r18, 0x02	; 2
    2612:	31 05       	cpc	r19, r1
    2614:	2c f4       	brge	.+10     	; 0x2620 <LCD_moveCursor+0x3a>
    2616:	8c 81       	ldd	r24, Y+4	; 0x04
    2618:	9d 81       	ldd	r25, Y+5	; 0x05
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	61 f0       	breq	.+24     	; 0x2636 <LCD_moveCursor+0x50>
    261e:	19 c0       	rjmp	.+50     	; 0x2652 <LCD_moveCursor+0x6c>
    2620:	2c 81       	ldd	r18, Y+4	; 0x04
    2622:	3d 81       	ldd	r19, Y+5	; 0x05
    2624:	22 30       	cpi	r18, 0x02	; 2
    2626:	31 05       	cpc	r19, r1
    2628:	69 f0       	breq	.+26     	; 0x2644 <LCD_moveCursor+0x5e>
    262a:	8c 81       	ldd	r24, Y+4	; 0x04
    262c:	9d 81       	ldd	r25, Y+5	; 0x05
    262e:	83 30       	cpi	r24, 0x03	; 3
    2630:	91 05       	cpc	r25, r1
    2632:	61 f0       	breq	.+24     	; 0x264c <LCD_moveCursor+0x66>
    2634:	0e c0       	rjmp	.+28     	; 0x2652 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	89 83       	std	Y+1, r24	; 0x01
    263a:	0b c0       	rjmp	.+22     	; 0x2652 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	80 5c       	subi	r24, 0xC0	; 192
    2640:	89 83       	std	Y+1, r24	; 0x01
    2642:	07 c0       	rjmp	.+14     	; 0x2652 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	80 5f       	subi	r24, 0xF0	; 240
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	03 c0       	rjmp	.+6      	; 0x2652 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	80 5b       	subi	r24, 0xB0	; 176
    2650:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	80 68       	ori	r24, 0x80	; 128
    2656:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LCD_sendCommand>
}
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	cf 91       	pop	r28
    2666:	df 91       	pop	r29
    2668:	08 95       	ret

0000266a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    266a:	df 93       	push	r29
    266c:	cf 93       	push	r28
    266e:	00 d0       	rcall	.+0      	; 0x2670 <LCD_displayStringRowColumn+0x6>
    2670:	00 d0       	rcall	.+0      	; 0x2672 <LCD_displayStringRowColumn+0x8>
    2672:	cd b7       	in	r28, 0x3d	; 61
    2674:	de b7       	in	r29, 0x3e	; 62
    2676:	89 83       	std	Y+1, r24	; 0x01
    2678:	6a 83       	std	Y+2, r22	; 0x02
    267a:	5c 83       	std	Y+4, r21	; 0x04
    267c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	6a 81       	ldd	r22, Y+2	; 0x02
    2682:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2686:	8b 81       	ldd	r24, Y+3	; 0x03
    2688:	9c 81       	ldd	r25, Y+4	; 0x04
    268a:	0e 94 ca 12 	call	0x2594	; 0x2594 <LCD_displayString>
}
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	62 97       	sbiw	r28, 0x12	; 18
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	9a 8b       	std	Y+18, r25	; 0x12
    26b2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    26b4:	89 89       	ldd	r24, Y+17	; 0x11
    26b6:	9a 89       	ldd	r25, Y+18	; 0x12
    26b8:	9e 01       	movw	r18, r28
    26ba:	2f 5f       	subi	r18, 0xFF	; 255
    26bc:	3f 4f       	sbci	r19, 0xFF	; 255
    26be:	b9 01       	movw	r22, r18
    26c0:	4a e0       	ldi	r20, 0x0A	; 10
    26c2:	50 e0       	ldi	r21, 0x00	; 0
    26c4:	0e 94 11 16 	call	0x2c22	; 0x2c22 <itoa>
   LCD_displayString(buff); /* Display the string */
    26c8:	ce 01       	movw	r24, r28
    26ca:	01 96       	adiw	r24, 0x01	; 1
    26cc:	0e 94 ca 12 	call	0x2594	; 0x2594 <LCD_displayString>
}
    26d0:	62 96       	adiw	r28, 0x12	; 18
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	08 95       	ret

000026e2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    26e2:	df 93       	push	r29
    26e4:	cf 93       	push	r28
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <LCD_sendCommand>
}
    26f0:	cf 91       	pop	r28
    26f2:	df 91       	pop	r29
    26f4:	08 95       	ret

000026f6 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{ticks++;
    26f6:	1f 92       	push	r1
    26f8:	0f 92       	push	r0
    26fa:	0f b6       	in	r0, 0x3f	; 63
    26fc:	0f 92       	push	r0
    26fe:	11 24       	eor	r1, r1
    2700:	2f 93       	push	r18
    2702:	3f 93       	push	r19
    2704:	4f 93       	push	r20
    2706:	5f 93       	push	r21
    2708:	6f 93       	push	r22
    270a:	7f 93       	push	r23
    270c:	8f 93       	push	r24
    270e:	9f 93       	push	r25
    2710:	af 93       	push	r26
    2712:	bf 93       	push	r27
    2714:	ef 93       	push	r30
    2716:	ff 93       	push	r31
    2718:	df 93       	push	r29
    271a:	cf 93       	push	r28
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	80 91 1a 01 	lds	r24, 0x011A
    2724:	90 91 1b 01 	lds	r25, 0x011B
    2728:	01 96       	adiw	r24, 0x01	; 1
    272a:	90 93 1b 01 	sts	0x011B, r25
    272e:	80 93 1a 01 	sts	0x011A, r24
if(ticks==Ticks){
    2732:	20 91 1a 01 	lds	r18, 0x011A
    2736:	30 91 1b 01 	lds	r19, 0x011B
    273a:	80 91 1c 01 	lds	r24, 0x011C
    273e:	90 91 1d 01 	lds	r25, 0x011D
    2742:	28 17       	cp	r18, r24
    2744:	39 07       	cpc	r19, r25
    2746:	79 f4       	brne	.+30     	; 0x2766 <__vector_9+0x70>
	if(g_callBackPtr != NULL_PTR)
    2748:	80 91 18 01 	lds	r24, 0x0118
    274c:	90 91 19 01 	lds	r25, 0x0119
    2750:	00 97       	sbiw	r24, 0x00	; 0
    2752:	49 f0       	breq	.+18     	; 0x2766 <__vector_9+0x70>
	{
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2754:	e0 91 18 01 	lds	r30, 0x0118
    2758:	f0 91 19 01 	lds	r31, 0x0119
    275c:	09 95       	icall
	ticks=0;
    275e:	10 92 1b 01 	sts	0x011B, r1
    2762:	10 92 1a 01 	sts	0x011A, r1
	}}
}
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	ff 91       	pop	r31
    276c:	ef 91       	pop	r30
    276e:	bf 91       	pop	r27
    2770:	af 91       	pop	r26
    2772:	9f 91       	pop	r25
    2774:	8f 91       	pop	r24
    2776:	7f 91       	pop	r23
    2778:	6f 91       	pop	r22
    277a:	5f 91       	pop	r21
    277c:	4f 91       	pop	r20
    277e:	3f 91       	pop	r19
    2780:	2f 91       	pop	r18
    2782:	0f 90       	pop	r0
    2784:	0f be       	out	0x3f, r0	; 63
    2786:	0f 90       	pop	r0
    2788:	1f 90       	pop	r1
    278a:	18 95       	reti

0000278c <__vector_19>:
ISR(TIMER0_COMP_vect)
{ticks++;
    278c:	1f 92       	push	r1
    278e:	0f 92       	push	r0
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	0f 92       	push	r0
    2794:	11 24       	eor	r1, r1
    2796:	2f 93       	push	r18
    2798:	3f 93       	push	r19
    279a:	4f 93       	push	r20
    279c:	5f 93       	push	r21
    279e:	6f 93       	push	r22
    27a0:	7f 93       	push	r23
    27a2:	8f 93       	push	r24
    27a4:	9f 93       	push	r25
    27a6:	af 93       	push	r26
    27a8:	bf 93       	push	r27
    27aa:	ef 93       	push	r30
    27ac:	ff 93       	push	r31
    27ae:	df 93       	push	r29
    27b0:	cf 93       	push	r28
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	80 91 1a 01 	lds	r24, 0x011A
    27ba:	90 91 1b 01 	lds	r25, 0x011B
    27be:	01 96       	adiw	r24, 0x01	; 1
    27c0:	90 93 1b 01 	sts	0x011B, r25
    27c4:	80 93 1a 01 	sts	0x011A, r24
if(ticks==Ticks){
    27c8:	20 91 1a 01 	lds	r18, 0x011A
    27cc:	30 91 1b 01 	lds	r19, 0x011B
    27d0:	80 91 1c 01 	lds	r24, 0x011C
    27d4:	90 91 1d 01 	lds	r25, 0x011D
    27d8:	28 17       	cp	r18, r24
    27da:	39 07       	cpc	r19, r25
    27dc:	79 f4       	brne	.+30     	; 0x27fc <__vector_19+0x70>
	if(g_callBackPtr != NULL_PTR)
    27de:	80 91 18 01 	lds	r24, 0x0118
    27e2:	90 91 19 01 	lds	r25, 0x0119
    27e6:	00 97       	sbiw	r24, 0x00	; 0
    27e8:	49 f0       	breq	.+18     	; 0x27fc <__vector_19+0x70>
	{
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    27ea:	e0 91 18 01 	lds	r30, 0x0118
    27ee:	f0 91 19 01 	lds	r31, 0x0119
    27f2:	09 95       	icall
		ticks=0;
    27f4:	10 92 1b 01 	sts	0x011B, r1
    27f8:	10 92 1a 01 	sts	0x011A, r1

	}}}
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	ff 91       	pop	r31
    2802:	ef 91       	pop	r30
    2804:	bf 91       	pop	r27
    2806:	af 91       	pop	r26
    2808:	9f 91       	pop	r25
    280a:	8f 91       	pop	r24
    280c:	7f 91       	pop	r23
    280e:	6f 91       	pop	r22
    2810:	5f 91       	pop	r21
    2812:	4f 91       	pop	r20
    2814:	3f 91       	pop	r19
    2816:	2f 91       	pop	r18
    2818:	0f 90       	pop	r0
    281a:	0f be       	out	0x3f, r0	; 63
    281c:	0f 90       	pop	r0
    281e:	1f 90       	pop	r1
    2820:	18 95       	reti

00002822 <Timer_init>:

void Timer_init(const Timer_ConfigType * Config_Ptr){
    2822:	df 93       	push	r29
    2824:	cf 93       	push	r28
    2826:	00 d0       	rcall	.+0      	; 0x2828 <Timer_init+0x6>
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
    282c:	9a 83       	std	Y+2, r25	; 0x02
    282e:	89 83       	std	Y+1, r24	; 0x01
	SREG |= (1<<7);
    2830:	af e5       	ldi	r26, 0x5F	; 95
    2832:	b0 e0       	ldi	r27, 0x00	; 0
    2834:	ef e5       	ldi	r30, 0x5F	; 95
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	80 81       	ld	r24, Z
    283a:	80 68       	ori	r24, 0x80	; 128
    283c:	8c 93       	st	X, r24
	Timer_setCallBack(Config_Ptr->a_ptr);
    283e:	e9 81       	ldd	r30, Y+1	; 0x01
    2840:	fa 81       	ldd	r31, Y+2	; 0x02
    2842:	84 81       	ldd	r24, Z+4	; 0x04
    2844:	95 81       	ldd	r25, Z+5	; 0x05
    2846:	0e 94 78 14 	call	0x28f0	; 0x28f0 <Timer_setCallBack>
	TCNT0 = 0; // Set Timer Initial Value 0
    284a:	e2 e5       	ldi	r30, 0x52	; 82
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	10 82       	st	Z, r1
	Ticks= Config_Ptr->Ticks2;
    2850:	e9 81       	ldd	r30, Y+1	; 0x01
    2852:	fa 81       	ldd	r31, Y+2	; 0x02
    2854:	86 81       	ldd	r24, Z+6	; 0x06
    2856:	88 2f       	mov	r24, r24
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	90 93 1d 01 	sts	0x011D, r25
    285e:	80 93 1c 01 	sts	0x011C, r24
	OCR0 = Config_Ptr->compare_value;
    2862:	ac e5       	ldi	r26, 0x5C	; 92
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	e9 81       	ldd	r30, Y+1	; 0x01
    2868:	fa 81       	ldd	r31, Y+2	; 0x02
    286a:	83 81       	ldd	r24, Z+3	; 0x03
    286c:	8c 93       	st	X, r24
	TIMSK |= (1<<(Config_Ptr->mode));
    286e:	a9 e5       	ldi	r26, 0x59	; 89
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	e9 e5       	ldi	r30, 0x59	; 89
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	48 2f       	mov	r20, r24
    287a:	e9 81       	ldd	r30, Y+1	; 0x01
    287c:	fa 81       	ldd	r31, Y+2	; 0x02
    287e:	81 81       	ldd	r24, Z+1	; 0x01
    2880:	28 2f       	mov	r18, r24
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	02 c0       	rjmp	.+4      	; 0x288e <Timer_init+0x6c>
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	2a 95       	dec	r18
    2890:	e2 f7       	brpl	.-8      	; 0x288a <Timer_init+0x68>
    2892:	84 2b       	or	r24, r20
    2894:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 in this example so COM00=0 & COM01=0
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<FOC0) | ((Config_Ptr->mode)<<WGM01) | ((Config_Ptr->output)<<COM00);
    2896:	a3 e5       	ldi	r26, 0x53	; 83
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	e9 81       	ldd	r30, Y+1	; 0x01
    289c:	fa 81       	ldd	r31, Y+2	; 0x02
    289e:	81 81       	ldd	r24, Z+1	; 0x01
    28a0:	88 2f       	mov	r24, r24
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	88 0f       	add	r24, r24
    28a6:	99 1f       	adc	r25, r25
    28a8:	88 0f       	add	r24, r24
    28aa:	99 1f       	adc	r25, r25
    28ac:	88 0f       	add	r24, r24
    28ae:	99 1f       	adc	r25, r25
    28b0:	28 2f       	mov	r18, r24
    28b2:	20 68       	ori	r18, 0x80	; 128
    28b4:	e9 81       	ldd	r30, Y+1	; 0x01
    28b6:	fa 81       	ldd	r31, Y+2	; 0x02
    28b8:	82 81       	ldd	r24, Z+2	; 0x02
    28ba:	88 2f       	mov	r24, r24
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	82 95       	swap	r24
    28c0:	92 95       	swap	r25
    28c2:	90 7f       	andi	r25, 0xF0	; 240
    28c4:	98 27       	eor	r25, r24
    28c6:	80 7f       	andi	r24, 0xF0	; 240
    28c8:	98 27       	eor	r25, r24
    28ca:	82 2b       	or	r24, r18
    28cc:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->clock);
    28ce:	a3 e5       	ldi	r26, 0x53	; 83
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	e3 e5       	ldi	r30, 0x53	; 83
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	98 2f       	mov	r25, r24
    28da:	98 7f       	andi	r25, 0xF8	; 248
    28dc:	e9 81       	ldd	r30, Y+1	; 0x01
    28de:	fa 81       	ldd	r31, Y+2	; 0x02
    28e0:	80 81       	ld	r24, Z
    28e2:	89 2b       	or	r24, r25
    28e4:	8c 93       	st	X, r24


}
    28e6:	0f 90       	pop	r0
    28e8:	0f 90       	pop	r0
    28ea:	cf 91       	pop	r28
    28ec:	df 91       	pop	r29
    28ee:	08 95       	ret

000028f0 <Timer_setCallBack>:
void Timer_setCallBack(void(*a_ptr)(void))
{
    28f0:	df 93       	push	r29
    28f2:	cf 93       	push	r28
    28f4:	00 d0       	rcall	.+0      	; 0x28f6 <Timer_setCallBack+0x6>
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	9a 83       	std	Y+2, r25	; 0x02
    28fc:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	9a 81       	ldd	r25, Y+2	; 0x02
    2902:	90 93 19 01 	sts	0x0119, r25
    2906:	80 93 18 01 	sts	0x0118, r24
}
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <Timer_dinit>:
void Timer_dinit(void){
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	cd b7       	in	r28, 0x3d	; 61
    291a:	de b7       	in	r29, 0x3e	; 62
	Ticks=0;
    291c:	10 92 1d 01 	sts	0x011D, r1
    2920:	10 92 1c 01 	sts	0x011C, r1
	ticks=0;
    2924:	10 92 1b 01 	sts	0x011B, r1
    2928:	10 92 1a 01 	sts	0x011A, r1
	TCNT0 = 0;
    292c:	e2 e5       	ldi	r30, 0x52	; 82
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	10 82       	st	Z, r1
	TIMSK = (TCCR0 & 0xFC);
    2932:	a9 e5       	ldi	r26, 0x59	; 89
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	e3 e5       	ldi	r30, 0x53	; 83
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	80 81       	ld	r24, Z
    293c:	8c 7f       	andi	r24, 0xFC	; 252
    293e:	8c 93       	st	X, r24
	TIFR |= (1<<TOV0);
    2940:	a8 e5       	ldi	r26, 0x58	; 88
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	e8 e5       	ldi	r30, 0x58	; 88
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	81 60       	ori	r24, 0x01	; 1
    294c:	8c 93       	st	X, r24
	SREG &= ~(1<<7);
    294e:	af e5       	ldi	r26, 0x5F	; 95
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	ef e5       	ldi	r30, 0x5F	; 95
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	8f 77       	andi	r24, 0x7F	; 127
    295a:	8c 93       	st	X, r24
}
    295c:	cf 91       	pop	r28
    295e:	df 91       	pop	r29
    2960:	08 95       	ret

00002962 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const Uart_ConfigType * Config_Ptr)
{
    2962:	df 93       	push	r29
    2964:	cf 93       	push	r28
    2966:	00 d0       	rcall	.+0      	; 0x2968 <UART_init+0x6>
    2968:	00 d0       	rcall	.+0      	; 0x296a <UART_init+0x8>
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
    296e:	9c 83       	std	Y+4, r25	; 0x04
    2970:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2972:	1a 82       	std	Y+2, r1	; 0x02
    2974:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = ((Config_Ptr->speed)<<U2X);
    2976:	ab e2       	ldi	r26, 0x2B	; 43
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	eb 81       	ldd	r30, Y+3	; 0x03
    297c:	fc 81       	ldd	r31, Y+4	; 0x04
    297e:	80 81       	ld	r24, Z
    2980:	88 0f       	add	r24, r24
    2982:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2984:	ea e2       	ldi	r30, 0x2A	; 42
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	88 e1       	ldi	r24, 0x18	; 24
    298a:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1) | (Config_Ptr->StopBit<<USBS) |((Config_Ptr->Mode<<UMSEL)) | ((Config_Ptr->Parity)<<UPM1);
    298c:	a0 e4       	ldi	r26, 0x40	; 64
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	eb 81       	ldd	r30, Y+3	; 0x03
    2992:	fc 81       	ldd	r31, Y+4	; 0x04
    2994:	83 81       	ldd	r24, Z+3	; 0x03
    2996:	88 2f       	mov	r24, r24
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	88 0f       	add	r24, r24
    299c:	99 1f       	adc	r25, r25
    299e:	88 0f       	add	r24, r24
    29a0:	99 1f       	adc	r25, r25
    29a2:	88 0f       	add	r24, r24
    29a4:	99 1f       	adc	r25, r25
    29a6:	28 2f       	mov	r18, r24
    29a8:	26 68       	ori	r18, 0x86	; 134
    29aa:	eb 81       	ldd	r30, Y+3	; 0x03
    29ac:	fc 81       	ldd	r31, Y+4	; 0x04
    29ae:	81 81       	ldd	r24, Z+1	; 0x01
    29b0:	88 2f       	mov	r24, r24
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	00 24       	eor	r0, r0
    29b6:	96 95       	lsr	r25
    29b8:	87 95       	ror	r24
    29ba:	07 94       	ror	r0
    29bc:	96 95       	lsr	r25
    29be:	87 95       	ror	r24
    29c0:	07 94       	ror	r0
    29c2:	98 2f       	mov	r25, r24
    29c4:	80 2d       	mov	r24, r0
    29c6:	28 2b       	or	r18, r24
    29c8:	eb 81       	ldd	r30, Y+3	; 0x03
    29ca:	fc 81       	ldd	r31, Y+4	; 0x04
    29cc:	82 81       	ldd	r24, Z+2	; 0x02
    29ce:	88 2f       	mov	r24, r24
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	88 0f       	add	r24, r24
    29d4:	99 1f       	adc	r25, r25
    29d6:	82 95       	swap	r24
    29d8:	92 95       	swap	r25
    29da:	90 7f       	andi	r25, 0xF0	; 240
    29dc:	98 27       	eor	r25, r24
    29de:	80 7f       	andi	r24, 0xF0	; 240
    29e0:	98 27       	eor	r25, r24
    29e2:	82 2b       	or	r24, r18
    29e4:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    29e6:	eb 81       	ldd	r30, Y+3	; 0x03
    29e8:	fc 81       	ldd	r31, Y+4	; 0x04
    29ea:	84 81       	ldd	r24, Z+4	; 0x04
    29ec:	95 81       	ldd	r25, Z+5	; 0x05
    29ee:	a6 81       	ldd	r26, Z+6	; 0x06
    29f0:	b7 81       	ldd	r27, Z+7	; 0x07
    29f2:	88 0f       	add	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	aa 1f       	adc	r26, r26
    29f8:	bb 1f       	adc	r27, r27
    29fa:	88 0f       	add	r24, r24
    29fc:	99 1f       	adc	r25, r25
    29fe:	aa 1f       	adc	r26, r26
    2a00:	bb 1f       	adc	r27, r27
    2a02:	88 0f       	add	r24, r24
    2a04:	99 1f       	adc	r25, r25
    2a06:	aa 1f       	adc	r26, r26
    2a08:	bb 1f       	adc	r27, r27
    2a0a:	9c 01       	movw	r18, r24
    2a0c:	ad 01       	movw	r20, r26
    2a0e:	80 e4       	ldi	r24, 0x40	; 64
    2a10:	92 e4       	ldi	r25, 0x42	; 66
    2a12:	af e0       	ldi	r26, 0x0F	; 15
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
    2a16:	bc 01       	movw	r22, r24
    2a18:	cd 01       	movw	r24, r26
    2a1a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__udivmodsi4>
    2a1e:	da 01       	movw	r26, r20
    2a20:	c9 01       	movw	r24, r18
    2a22:	01 97       	sbiw	r24, 0x01	; 1
    2a24:	9a 83       	std	Y+2, r25	; 0x02
    2a26:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2a28:	e0 e4       	ldi	r30, 0x40	; 64
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a30:	89 2f       	mov	r24, r25
    2a32:	99 27       	eor	r25, r25
    2a34:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2a36:	e9 e2       	ldi	r30, 0x29	; 41
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	80 83       	st	Z, r24
}
    2a3e:	0f 90       	pop	r0
    2a40:	0f 90       	pop	r0
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	cf 91       	pop	r28
    2a48:	df 91       	pop	r29
    2a4a:	08 95       	ret

00002a4c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	0f 92       	push	r0
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
    2a56:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2a58:	eb e2       	ldi	r30, 0x2B	; 43
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	88 2f       	mov	r24, r24
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	80 72       	andi	r24, 0x20	; 32
    2a64:	90 70       	andi	r25, 0x00	; 0
    2a66:	00 97       	sbiw	r24, 0x00	; 0
    2a68:	b9 f3       	breq	.-18     	; 0x2a58 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2a6a:	ec e2       	ldi	r30, 0x2C	; 44
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2a72:	0f 90       	pop	r0
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2a82:	eb e2       	ldi	r30, 0x2B	; 43
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	80 81       	ld	r24, Z
    2a88:	88 23       	and	r24, r24
    2a8a:	dc f7       	brge	.-10     	; 0x2a82 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2a8c:	ec e2       	ldi	r30, 0x2C	; 44
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
}
    2a92:	cf 91       	pop	r28
    2a94:	df 91       	pop	r29
    2a96:	08 95       	ret

00002a98 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2a98:	df 93       	push	r29
    2a9a:	cf 93       	push	r28
    2a9c:	00 d0       	rcall	.+0      	; 0x2a9e <UART_sendString+0x6>
    2a9e:	0f 92       	push	r0
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
    2aa4:	9b 83       	std	Y+3, r25	; 0x03
    2aa6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2aa8:	19 82       	std	Y+1, r1	; 0x01
    2aaa:	0e c0       	rjmp	.+28     	; 0x2ac8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	28 2f       	mov	r18, r24
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	e2 0f       	add	r30, r18
    2aba:	f3 1f       	adc	r31, r19
    2abc:	80 81       	ld	r24, Z
    2abe:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <UART_sendByte>
		i++;
    2ac2:	89 81       	ldd	r24, Y+1	; 0x01
    2ac4:	8f 5f       	subi	r24, 0xFF	; 255
    2ac6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	28 2f       	mov	r18, r24
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad2:	fc 01       	movw	r30, r24
    2ad4:	e2 0f       	add	r30, r18
    2ad6:	f3 1f       	adc	r31, r19
    2ad8:	80 81       	ld	r24, Z
    2ada:	88 23       	and	r24, r24
    2adc:	39 f7       	brne	.-50     	; 0x2aac <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	08 95       	ret

00002aea <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2aea:	0f 93       	push	r16
    2aec:	1f 93       	push	r17
    2aee:	df 93       	push	r29
    2af0:	cf 93       	push	r28
    2af2:	00 d0       	rcall	.+0      	; 0x2af4 <UART_receiveString+0xa>
    2af4:	0f 92       	push	r0
    2af6:	cd b7       	in	r28, 0x3d	; 61
    2af8:	de b7       	in	r29, 0x3e	; 62
    2afa:	9b 83       	std	Y+3, r25	; 0x03
    2afc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2afe:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	28 2f       	mov	r18, r24
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	9b 81       	ldd	r25, Y+3	; 0x03
    2b0a:	8c 01       	movw	r16, r24
    2b0c:	02 0f       	add	r16, r18
    2b0e:	13 1f       	adc	r17, r19
    2b10:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <UART_recieveByte>
    2b14:	f8 01       	movw	r30, r16
    2b16:	80 83       	st	Z, r24
    2b18:	0f c0       	rjmp	.+30     	; 0x2b38 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	8f 5f       	subi	r24, 0xFF	; 255
    2b1e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2b20:	89 81       	ldd	r24, Y+1	; 0x01
    2b22:	28 2f       	mov	r18, r24
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	8a 81       	ldd	r24, Y+2	; 0x02
    2b28:	9b 81       	ldd	r25, Y+3	; 0x03
    2b2a:	8c 01       	movw	r16, r24
    2b2c:	02 0f       	add	r16, r18
    2b2e:	13 1f       	adc	r17, r19
    2b30:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <UART_recieveByte>
    2b34:	f8 01       	movw	r30, r16
    2b36:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	28 2f       	mov	r18, r24
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	9b 81       	ldd	r25, Y+3	; 0x03
    2b42:	fc 01       	movw	r30, r24
    2b44:	e2 0f       	add	r30, r18
    2b46:	f3 1f       	adc	r31, r19
    2b48:	80 81       	ld	r24, Z
    2b4a:	83 32       	cpi	r24, 0x23	; 35
    2b4c:	31 f7       	brne	.-52     	; 0x2b1a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	28 2f       	mov	r18, r24
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	8a 81       	ldd	r24, Y+2	; 0x02
    2b56:	9b 81       	ldd	r25, Y+3	; 0x03
    2b58:	fc 01       	movw	r30, r24
    2b5a:	e2 0f       	add	r30, r18
    2b5c:	f3 1f       	adc	r31, r19
    2b5e:	10 82       	st	Z, r1
}
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	1f 91       	pop	r17
    2b6c:	0f 91       	pop	r16
    2b6e:	08 95       	ret

00002b70 <__udivmodsi4>:
    2b70:	a1 e2       	ldi	r26, 0x21	; 33
    2b72:	1a 2e       	mov	r1, r26
    2b74:	aa 1b       	sub	r26, r26
    2b76:	bb 1b       	sub	r27, r27
    2b78:	fd 01       	movw	r30, r26
    2b7a:	0d c0       	rjmp	.+26     	; 0x2b96 <__udivmodsi4_ep>

00002b7c <__udivmodsi4_loop>:
    2b7c:	aa 1f       	adc	r26, r26
    2b7e:	bb 1f       	adc	r27, r27
    2b80:	ee 1f       	adc	r30, r30
    2b82:	ff 1f       	adc	r31, r31
    2b84:	a2 17       	cp	r26, r18
    2b86:	b3 07       	cpc	r27, r19
    2b88:	e4 07       	cpc	r30, r20
    2b8a:	f5 07       	cpc	r31, r21
    2b8c:	20 f0       	brcs	.+8      	; 0x2b96 <__udivmodsi4_ep>
    2b8e:	a2 1b       	sub	r26, r18
    2b90:	b3 0b       	sbc	r27, r19
    2b92:	e4 0b       	sbc	r30, r20
    2b94:	f5 0b       	sbc	r31, r21

00002b96 <__udivmodsi4_ep>:
    2b96:	66 1f       	adc	r22, r22
    2b98:	77 1f       	adc	r23, r23
    2b9a:	88 1f       	adc	r24, r24
    2b9c:	99 1f       	adc	r25, r25
    2b9e:	1a 94       	dec	r1
    2ba0:	69 f7       	brne	.-38     	; 0x2b7c <__udivmodsi4_loop>
    2ba2:	60 95       	com	r22
    2ba4:	70 95       	com	r23
    2ba6:	80 95       	com	r24
    2ba8:	90 95       	com	r25
    2baa:	9b 01       	movw	r18, r22
    2bac:	ac 01       	movw	r20, r24
    2bae:	bd 01       	movw	r22, r26
    2bb0:	cf 01       	movw	r24, r30
    2bb2:	08 95       	ret

00002bb4 <__prologue_saves__>:
    2bb4:	2f 92       	push	r2
    2bb6:	3f 92       	push	r3
    2bb8:	4f 92       	push	r4
    2bba:	5f 92       	push	r5
    2bbc:	6f 92       	push	r6
    2bbe:	7f 92       	push	r7
    2bc0:	8f 92       	push	r8
    2bc2:	9f 92       	push	r9
    2bc4:	af 92       	push	r10
    2bc6:	bf 92       	push	r11
    2bc8:	cf 92       	push	r12
    2bca:	df 92       	push	r13
    2bcc:	ef 92       	push	r14
    2bce:	ff 92       	push	r15
    2bd0:	0f 93       	push	r16
    2bd2:	1f 93       	push	r17
    2bd4:	cf 93       	push	r28
    2bd6:	df 93       	push	r29
    2bd8:	cd b7       	in	r28, 0x3d	; 61
    2bda:	de b7       	in	r29, 0x3e	; 62
    2bdc:	ca 1b       	sub	r28, r26
    2bde:	db 0b       	sbc	r29, r27
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	cd bf       	out	0x3d, r28	; 61
    2bea:	09 94       	ijmp

00002bec <__epilogue_restores__>:
    2bec:	2a 88       	ldd	r2, Y+18	; 0x12
    2bee:	39 88       	ldd	r3, Y+17	; 0x11
    2bf0:	48 88       	ldd	r4, Y+16	; 0x10
    2bf2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bf4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bf6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bf8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bfa:	9b 84       	ldd	r9, Y+11	; 0x0b
    2bfc:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bfe:	b9 84       	ldd	r11, Y+9	; 0x09
    2c00:	c8 84       	ldd	r12, Y+8	; 0x08
    2c02:	df 80       	ldd	r13, Y+7	; 0x07
    2c04:	ee 80       	ldd	r14, Y+6	; 0x06
    2c06:	fd 80       	ldd	r15, Y+5	; 0x05
    2c08:	0c 81       	ldd	r16, Y+4	; 0x04
    2c0a:	1b 81       	ldd	r17, Y+3	; 0x03
    2c0c:	aa 81       	ldd	r26, Y+2	; 0x02
    2c0e:	b9 81       	ldd	r27, Y+1	; 0x01
    2c10:	ce 0f       	add	r28, r30
    2c12:	d1 1d       	adc	r29, r1
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	f8 94       	cli
    2c18:	de bf       	out	0x3e, r29	; 62
    2c1a:	0f be       	out	0x3f, r0	; 63
    2c1c:	cd bf       	out	0x3d, r28	; 61
    2c1e:	ed 01       	movw	r28, r26
    2c20:	08 95       	ret

00002c22 <itoa>:
    2c22:	fb 01       	movw	r30, r22
    2c24:	9f 01       	movw	r18, r30
    2c26:	e8 94       	clt
    2c28:	42 30       	cpi	r20, 0x02	; 2
    2c2a:	c4 f0       	brlt	.+48     	; 0x2c5c <itoa+0x3a>
    2c2c:	45 32       	cpi	r20, 0x25	; 37
    2c2e:	b4 f4       	brge	.+44     	; 0x2c5c <itoa+0x3a>
    2c30:	4a 30       	cpi	r20, 0x0A	; 10
    2c32:	29 f4       	brne	.+10     	; 0x2c3e <itoa+0x1c>
    2c34:	97 fb       	bst	r25, 7
    2c36:	1e f4       	brtc	.+6      	; 0x2c3e <itoa+0x1c>
    2c38:	90 95       	com	r25
    2c3a:	81 95       	neg	r24
    2c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c3e:	64 2f       	mov	r22, r20
    2c40:	77 27       	eor	r23, r23
    2c42:	0e 94 42 16 	call	0x2c84	; 0x2c84 <__udivmodhi4>
    2c46:	80 5d       	subi	r24, 0xD0	; 208
    2c48:	8a 33       	cpi	r24, 0x3A	; 58
    2c4a:	0c f0       	brlt	.+2      	; 0x2c4e <itoa+0x2c>
    2c4c:	89 5d       	subi	r24, 0xD9	; 217
    2c4e:	81 93       	st	Z+, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	00 97       	sbiw	r24, 0x00	; 0
    2c54:	a1 f7       	brne	.-24     	; 0x2c3e <itoa+0x1c>
    2c56:	16 f4       	brtc	.+4      	; 0x2c5c <itoa+0x3a>
    2c58:	5d e2       	ldi	r21, 0x2D	; 45
    2c5a:	51 93       	st	Z+, r21
    2c5c:	10 82       	st	Z, r1
    2c5e:	c9 01       	movw	r24, r18
    2c60:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <strrev>

00002c64 <strrev>:
    2c64:	dc 01       	movw	r26, r24
    2c66:	fc 01       	movw	r30, r24
    2c68:	67 2f       	mov	r22, r23
    2c6a:	71 91       	ld	r23, Z+
    2c6c:	77 23       	and	r23, r23
    2c6e:	e1 f7       	brne	.-8      	; 0x2c68 <strrev+0x4>
    2c70:	32 97       	sbiw	r30, 0x02	; 2
    2c72:	04 c0       	rjmp	.+8      	; 0x2c7c <strrev+0x18>
    2c74:	7c 91       	ld	r23, X
    2c76:	6d 93       	st	X+, r22
    2c78:	70 83       	st	Z, r23
    2c7a:	62 91       	ld	r22, -Z
    2c7c:	ae 17       	cp	r26, r30
    2c7e:	bf 07       	cpc	r27, r31
    2c80:	c8 f3       	brcs	.-14     	; 0x2c74 <strrev+0x10>
    2c82:	08 95       	ret

00002c84 <__udivmodhi4>:
    2c84:	aa 1b       	sub	r26, r26
    2c86:	bb 1b       	sub	r27, r27
    2c88:	51 e1       	ldi	r21, 0x11	; 17
    2c8a:	07 c0       	rjmp	.+14     	; 0x2c9a <__udivmodhi4_ep>

00002c8c <__udivmodhi4_loop>:
    2c8c:	aa 1f       	adc	r26, r26
    2c8e:	bb 1f       	adc	r27, r27
    2c90:	a6 17       	cp	r26, r22
    2c92:	b7 07       	cpc	r27, r23
    2c94:	10 f0       	brcs	.+4      	; 0x2c9a <__udivmodhi4_ep>
    2c96:	a6 1b       	sub	r26, r22
    2c98:	b7 0b       	sbc	r27, r23

00002c9a <__udivmodhi4_ep>:
    2c9a:	88 1f       	adc	r24, r24
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	5a 95       	dec	r21
    2ca0:	a9 f7       	brne	.-22     	; 0x2c8c <__udivmodhi4_loop>
    2ca2:	80 95       	com	r24
    2ca4:	90 95       	com	r25
    2ca6:	bc 01       	movw	r22, r24
    2ca8:	cd 01       	movw	r24, r26
    2caa:	08 95       	ret

00002cac <_exit>:
    2cac:	f8 94       	cli

00002cae <__stop_program>:
    2cae:	ff cf       	rjmp	.-2      	; 0x2cae <__stop_program>
